<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
	<meta name='generator' content='ExamView HTML Generator 1.0.5'>
	<meta name='robots' content='noindex,nofollow'>
	<title>Review 11 Sorts and Searches</title>
	<style type='text/css'>
		.spacer { line-height:.7em; }
		.title { font-size:13pt; font-weight:bold; font-family:"Times New Roman", "Times", serif; color:#000000; }
		.qnumber { font-size:12pt; font-family:"Times New Roman", "Times", serif; color:#000000; text-align:right; }
		.choice { font-size:12pt; font-family:"Times New Roman", "Times", serif; color:#000000; }
		.default { font-size:12pt; font-family:"Times New Roman", "Times", serif; color:#000000; }
		.qinfo { font-size:12pt; font-family:"Times New Roman", "Times", serif; color:#000000; }
		.points { font-size:8pt; font-family:"Times New Roman", "Times", serif; color:#000000; }
		TD.pad { padding: 0pt 4pt 0pt 4pt; }
		.font1 { font-family:"Times New Roman", "Times", serif; }
		.font2 { font-family:"courier new", "Courier", monospace; }
		.font3 { font-family:"courier new", "Courier", monospace; }
		.font4 { font-family:"Tahoma"; }
		.font5 { font-family:"courier new", "Courier", monospace; }
	</style>
<script type='text/javascript' language='JavaScript1.1'>
<!--
	// Copyright (c) 2000-2008 eInstruction Corp.
	var listMap = '111111111111111111111111111111111111111111111';
	var qtypeMap = '222222222222222222222222222222222222222222222';
	var ansMap = new Array(45);
	var ptsMap = new Array(45);
	ansMap[0] = 'D';
	ptsMap[0] = 1;
	ansMap[1] = 'C';
	ptsMap[1] = 1;
	ansMap[2] = 'D';
	ptsMap[2] = 1;
	ansMap[3] = 'C';
	ptsMap[3] = 1;
	ansMap[4] = 'A';
	ptsMap[4] = 1;
	ansMap[5] = 'E';
	ptsMap[5] = 1;
	ansMap[6] = 'A';
	ptsMap[6] = 1;
	ansMap[7] = 'C';
	ptsMap[7] = 1;
	ansMap[8] = 'E';
	ptsMap[8] = 1;
	ansMap[9] = 'A';
	ptsMap[9] = 1;
	ansMap[10] = 'D';
	ptsMap[10] = 1;
	ansMap[11] = 'D';
	ptsMap[11] = 1;
	ansMap[12] = 'C';
	ptsMap[12] = 1;
	ansMap[13] = 'B';
	ptsMap[13] = 1;
	ansMap[14] = 'A';
	ptsMap[14] = 1;
	ansMap[15] = 'A';
	ptsMap[15] = 1;
	ansMap[16] = 'C';
	ptsMap[16] = 1;
	ansMap[17] = 'D';
	ptsMap[17] = 1;
	ansMap[18] = 'A';
	ptsMap[18] = 1;
	ansMap[19] = 'B';
	ptsMap[19] = 1;
	ansMap[20] = 'C';
	ptsMap[20] = 1;
	ansMap[21] = 'D';
	ptsMap[21] = 1;
	ansMap[22] = 'D';
	ptsMap[22] = 1;
	ansMap[23] = 'E';
	ptsMap[23] = 1;
	ansMap[24] = 'B';
	ptsMap[24] = 1;
	ansMap[25] = 'D';
	ptsMap[25] = 1;
	ansMap[26] = 'E';
	ptsMap[26] = 1;
	ansMap[27] = 'C';
	ptsMap[27] = 1;
	ansMap[28] = 'A';
	ptsMap[28] = 1;
	ansMap[29] = 'A';
	ptsMap[29] = 1;
	ansMap[30] = 'B';
	ptsMap[30] = 1;
	ansMap[31] = 'D';
	ptsMap[31] = 1;
	ansMap[32] = 'B';
	ptsMap[32] = 1;
	ansMap[33] = 'D';
	ptsMap[33] = 1;
	ansMap[34] = 'E';
	ptsMap[34] = 1;
	ansMap[35] = 'C';
	ptsMap[35] = 1;
	ansMap[36] = 'D';
	ptsMap[36] = 1;
	ansMap[37] = 'C';
	ptsMap[37] = 1;
	ansMap[38] = 'E';
	ptsMap[38] = 1;
	ansMap[39] = 'A';
	ptsMap[39] = 1;
	ansMap[40] = 'C';
	ptsMap[40] = 1;
	ansMap[41] = 'A';
	ptsMap[41] = 1;
	ansMap[42] = 'B';
	ptsMap[42] = 1;
	ansMap[43] = 'A';
	ptsMap[43] = 1;
	ansMap[44] = 'C';
	ptsMap[44] = 1;
	function GradeIt(f)
	{
		var	MAGIC = 840;
		var	htmlUrl = window.location.href;
		var	studentName;
		var	totalCorrect = 0;
		var	totalPossible = 0;
		var	numCorrect = 0;
		var	numPossible = 0;
		var	numBlank = 0;
		var	numSubjective = 0;
		var	currentInstruction;
		var	currentNarrative;
		var	scorePercent;
		var	index;
		var	msg;
		var	text;
		var	i;
		var	showFeedback = false;
		var	showRef = false;
		var	numQuestions = 45;
		var	numInstructions = 1;
		var	numNarratives = 0;
		var	prefixText = new Array(45);
		var	numberText = new Array(45);
		var	questionText = new Array(45);
		var	answerText = new Array(45);
		var	responseText = new Array(45);
		var	feedbackText = new Array(45);
		var	refText = new Array(45);
		var	narrativeIndex = new Array(0);
		var	narrativeText = new Array(0);
		var	instructionIndex = new Array(1);
		var	instructionText = new Array(1);
		var	listMap = '111111111111111111111111111111111111111111111';
		var	titleString = 'Review 11 Sorts and Searches';
		var	styleText = new Array(13);
		styleText[0] = '.spacer { line-height:.7em; }';
		styleText[1] = '.title { font-size:13pt; font-weight:bold; font-family:"Times New Roman", "Times", serif; color:#000000; }';
		styleText[2] = '.qnumber { font-size:12pt; font-family:"Times New Roman", "Times", serif; color:#000000; text-align:right; }';
		styleText[3] = '.choice { font-size:12pt; font-family:"Times New Roman", "Times", serif; color:#000000; }';
		styleText[4] = '.default { font-size:12pt; font-family:"Times New Roman", "Times", serif; color:#000000; }';
		styleText[5] = '.qinfo { font-size:12pt; font-family:"Times New Roman", "Times", serif; color:#000000; }';
		styleText[6] = '.points { font-size:8pt; font-family:"Times New Roman", "Times", serif; color:#000000; }';
		styleText[7] = 'TD.pad { padding: 0pt 4pt 0pt 4pt; }';
		styleText[8] = '.font1 { font-family:"Times New Roman", "Times", serif }';
		styleText[9] = '.font2 { font-family:"courier new", "Courier", monospace }';
		styleText[10] = '.font3 { font-family:"courier new", "Courier", monospace }';
		styleText[11] = '.font4 { font-family:"Tahoma" }';
		styleText[12] = '.font5 { font-family:"courier new", "Courier", monospace }';
		instructionText[0] = '<div class=\'default\'><b>Multiple Choice</b><span style=\'font-size:10pt\'><br></span><i>Identify the choice ' +
'that best completes the statement or answers the question.</i></div>';
		instructionIndex[0] = 0;
		numberText[0] = '1.';
		questionText[0] = '<div class=\'default\'>Which searching algorithm starts looking for a particular value at the beginning ' +
'of a list and has the potential to examine every item in the list?<br></div><div ' +
'class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>merge sort</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>quick sort</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>binary search</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>linear search</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>insertion sort</span></td></tr></table></div>';
		answerText[0] = '<div class=\'default\'>D</div>';
		numberText[1] = '2.';
		questionText[1] = '<div class=\'default\'>Which searching algorithm starts looking for a particular value in the middle of a ' +
'list and continually examines smaller sections of the list?<br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>merge sort</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>quick sort</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>binary search</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>linear search</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>insertion sort</span></td></tr></table></div>';
		answerText[1] = '<div class=\'default\'>C</div>';
		numberText[2] = '3.';
		questionText[2] = '<div class=\'default\'>Which searching algorithm is typically composed of a single loop with a nested if ' +
'statement?<br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>merge sort</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>quick sort</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>binary search</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>linear search</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>insertion sort</span></td></tr></table></div>';
		answerText[2] = '<div class=\'default\'>D</div>';
		numberText[3] = '4.';
		questionText[3] = '<div class=\'default\'>Which searching algorithm written iteratively and recursively?<br></div><div ' +
'class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>merge sort</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>quick sort</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>binary search</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>linear search</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>insertion sort</span></td></tr></table></div>';
		answerText[3] = '<div class=\'default\'>C</div>';
		numberText[4] = '5.';
		questionText[4] = '<div class=\'default\'>Assuming that the following algorithm is a linear search, which of the following ' +
'sections of code could fill&nbsp;&nbsp;&nbsp; /* code */&nbsp; so that the algorithm would work as ' +
'intended?<br><br><span class=\'font2\'>public static int search( int&#091;&#093; list, int toFind ' +
')<br>{<br>&nbsp; int spot = 0;<br><br>&nbsp; </span> /* code */ <span class=\'font2\'><br><br>&nbsp; ' +
'return -1;<br>}<br><br></span>I.<span class=\'font2\'><br>for( int item : list )<br>{<br>&nbsp; if( item ' +
'== toFind )<br>&nbsp;&nbsp;&nbsp; return spot;<br>&nbsp; spot++;<br>}<br><br></span>II.<span ' +
'class=\'font2\'><br>for( int item : list )<br>{<br>&nbsp; if( item == toFind )<br>&nbsp;&nbsp;&nbsp; ' +
'return spot;<br>}<br><br></span>III.<span class=\'font2\'><br>for( int item : list )<br>{<br>&nbsp; if( ' +
'spot == toFind )<br>&nbsp;&nbsp;&nbsp; return -1;<br>&nbsp; spot++;<br>}</span><br></div><div ' +
'class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>I only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>I and II only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>II and III only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>I and III only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>III only</span></td></tr></table></div>';
		answerText[4] = '<div class=\'default\'>A</div>';
		numberText[5] = '6.';
		questionText[5] = '<div class=\'default\'>Assuming that the following algorithm is a linear search, which of the following ' +
'sections of code could fill&nbsp;&nbsp;&nbsp; /* code */&nbsp; so that the algorithm would work as ' +
'intended?<br><br><span class=\'font2\'>public static int search( int&#091;&#093; list, int toFind ' +
')<br>{<br><br>&nbsp; </span> /* code */ <span class=\'font2\'><br><br>&nbsp; return ' +
'-1;<br>}<br><br></span>I.<span class=\'font2\'><br>for( int i = 0; i &lt;= list.length; i++ ' +
')<br>{<br>&nbsp; if( list&#091;i&#093; == toFind )<br>&nbsp;&nbsp;&nbsp; return ' +
'i;<br>}<br><br></span>II.<span class=\'font2\'><br>for( int i = 0; i &lt; list.length; i++ ' +
')<br>{<br>&nbsp; if( i == toFind )<br>&nbsp;&nbsp;&nbsp; return i;<br>}<br><br></span>III.<span ' +
'class=\'font2\'><br>for( int i = 0; i &lt; list.length; i++ )<br>{<br>&nbsp; if( list&#091;i&#093; == ' +
'toFind )<br>&nbsp;&nbsp;&nbsp; return i;<br>}</span><br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>I only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>I and II only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>II and III only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>I and III only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>III only</span></td></tr></table></div>';
		answerText[5] = '<div class=\'default\'>E</div>';
		numberText[6] = '7.';
		questionText[6] = '<div class=\'default\'>Assuming that the following algorithm is a binary search, which of the following ' +
'sections of code could fill&nbsp;&nbsp;&nbsp; /* code */&nbsp; so that the algorithm would work as ' +
'intended?<br><br><span class=\'font2\'>public static int search( int&#091;&#093; list, int toFind ' +
')<br>{<br></span><span class=\'font3\'>&nbsp; int left = 0;<br></span><span class=\'font3\'>&nbsp; int right ' +
'= list.length - 1; </span><span class=\'font2\'><br><br>&nbsp; </span> /* code */ <span ' +
'class=\'font2\'><br><br>&nbsp; return -1;<br>}<br><br></span>I.<span class=\'font2\'><br></span><span ' +
'class=\'font3\'>while (left &lt;= right){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int mid = (left + right) / ' +
'2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( list&#091;mid&#093; == toFind ' +
')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ' +
'mid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if ( list&#091;mid&#093; &lt; toFind ' +
')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; left = mid + ' +
'1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; right = mid &#8211; 1;<br>}</span><span class=\'font2\'><br></span><span ' +
'class=\'font2\'><br></span>II.<span class=\'font2\'><br></span><span class=\'font3\'>while (left &lt;= ' +
'right){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int mid = (left + right) / ' +
'2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( list&#091;mid&#093; == toFind ' +
')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ' +
'mid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if ( list&#091;mid&#093; &gt; toFind ' +
')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; left = mid + ' +
'1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; right = mid &#8211; 1;<br></span><span class=\'font3\'>}</span><span ' +
'class=\'font2\'><br><br></span>III.<span class=\'font2\'><br></span><span class=\'font3\'>while (left &lt;= ' +
'right){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int mid = (left + right) / ' +
'2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( mid == toFind )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if ( ' +
'list&#091;mid&#093; &lt; toFind )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'left = mid + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; right = mid &#8211; 1;<br></span><span ' +
'class=\'font3\'>}</span><br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>I only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>I and II only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>II and III only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>I and III only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>III only</span></td></tr></table></div>';
		answerText[6] = '<div class=\'default\'>A</div>';
		numberText[7] = '8.';
		questionText[7] = '<div class=\'default\'>Assuming that the following algorithm is supposed to search for the largest value ' +
'in the list, which of the following sections of code could fill&nbsp;&nbsp;&nbsp; /* code */&nbsp; so ' +
'that the algorithm would work as intended?<br><br><span class=\'font2\'>public static int findLargest( ' +
'int&#091;&#093; list )<br>{<br>&nbsp; int big = Integer.MIN_VALUE;<br><br>&nbsp; </span> /* code */ ' +
'<span class=\'font2\'><br><br>&nbsp; return big;<br>}<br><br></span>I.<span class=\'font2\'><br>for( int i = ' +
'0; i &lt;= list.length; i++ )<br>{<br>&nbsp; if( list&#091;i&#093; &gt; big )<br>&nbsp;&nbsp;&nbsp; ' +
'big = list&#091;i&#093;;<br>}<br><br></span>II.<span class=\'font2\'><br>for( int i = 1; i &lt;= ' +
'list.length; i++ )<br>{<br>&nbsp; if( list&#091;i-1&#093; &gt; big )<br>&nbsp;&nbsp;&nbsp; big = ' +
'list&#091;i-1&#093;;<br>}<br><br></span>III.<span class=\'font2\'><br>for( int i = 0; i &lt; list.length; ' +
'i++ )<br>{<br>&nbsp; if( list&#091;i&#093; &gt; big )<br>&nbsp;&nbsp;&nbsp; big = ' +
'list&#091;i&#093;;<br>}</span><br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>I only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>I and II only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>II and III only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>I and III only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>III only</span></td></tr></table></div>';
		answerText[7] = '<div class=\'default\'>C</div>';
		numberText[8] = '9.';
		questionText[8] = '<div class=\'default\'>Assuming that the following algorithm is supposed to find the smallest value in ' +
'the list, which of the following sections of code could fill&nbsp;&nbsp;&nbsp; /* code */&nbsp; so ' +
'that the algorithm would work as intended?<br><br><span class=\'font2\'>public static int findSmallest( ' +
'int&#091;&#093; list )<br>{<br>&nbsp; int small = Integer.MAX_VALUE;<br><br>&nbsp; </span> /* code */ ' +
'<span class=\'font2\'><br><br>&nbsp; return small;<br>}<br><br></span>I.<span class=\'font2\'><br>for( int ' +
'item : list )<br>{<br>&nbsp; if( list&#091;item&#093; &lt; small )<br>&nbsp;&nbsp;&nbsp; small = ' +
'item;<br>}<br><br></span>II.<span class=\'font2\'><br>for( int item : list )<br>{<br>&nbsp; if( ' +
'list&#091;item&#093; &lt; small )<br>&nbsp;&nbsp;&nbsp; small = ' +
'list&#091;item&#093;;<br>}<br><br></span>III.<span class=\'font2\'><br>for( int item : list ' +
')<br>{<br>&nbsp; if( item &lt; small )<br>&nbsp;&nbsp;&nbsp; small = item;<br>}</span><br></div><div ' +
'class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>I only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>I and II only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>II and III only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>I and III only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>III only</span></td></tr></table></div>';
		answerText[8] = '<div class=\'default\'>E</div>';
		numberText[9] = '10.';
		questionText[9] = '<div class=\'default\'>If a search value exists in a sorted list of 200 items, what is the ' +
'<b><i>maximum</i></b> number of comparisons that may be needed to find the search value using a ' +
'linear / sequential search?<br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>200</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>199</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>201</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>1</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>400</span></td></tr></table></div>';
		answerText[9] = '<div class=\'default\'>A</div>';
		numberText[10] = '11.';
		questionText[10] = '<div class=\'default\'>If a search value exists in a sorted list of 200 items, what is the ' +
'<b><i>minimum</i></b> number of comparisons that may be needed to find the search value using a ' +
'linear / sequential search?<br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>200</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>199</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>201</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>1</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>400</span></td></tr></table></div>';
		answerText[10] = '<div class=\'default\'>D</div>';
		numberText[11] = '12.';
		questionText[11] = '<div class=\'default\'>If a search value exists in an unsorted list of 200 items, what is the ' +
'<b><i>minimum</i></b> number of comparisons that may be needed to find the search value using a ' +
'linear / sequential search?<br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>200</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>199</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>201</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>1</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>400</span></td></tr></table></div>';
		answerText[11] = '<div class=\'default\'>D</div>';
		numberText[12] = '13.';
		questionText[12] = '<div class=\'default\'>If a search value exists in an unsorted list of 200 items, what is the ' +
'<b><i>maximum</i></b> number of comparisons that may be needed to find the search value using a ' +
'linear / sequential search?<br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>1</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>199</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>200</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>201</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>400</span></td></tr></table></div>';
		answerText[12] = '<div class=\'default\'>C</div>';
		numberText[13] = '14.';
		questionText[13] = '<div class=\'default\'>If a search value exists in a sorted list of 200 items, what is the ' +
'<b><i>maximum</i></b> number of comparisons that may be needed to find the search value using a ' +
'binary search?<br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>1</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>8</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>7</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>10</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>9</span></td></tr></table></div>';
		answerText[13] = '<div class=\'default\'>B</div>';
		numberText[14] = '15.';
		questionText[14] = '<div class=\'default\'>If a search value exists in a sorted list of 200 items, what is the ' +
'<b><i>minimum</i></b> number of comparisons that may be needed to find the search value using a ' +
'binary search?<br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>1</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>8</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>7</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>10</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>9</span></td></tr></table></div>';
		answerText[14] = '<div class=\'default\'>A</div>';
		numberText[15] = '16.';
		questionText[15] = '<div class=\'default\'>If a search value exists in a sorted list of 2000 items, what is the ' +
'<b><i>maximum</i></b> number of comparisons that may be needed to find the search value using a ' +
'binary search?<br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>11</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>8</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>12</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>10</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>9</span></td></tr></table></div>';
		answerText[15] = '<div class=\'default\'>A</div>';
		numberText[16] = '17.';
		questionText[16] = '<div class=\'default\'>If a search value exists in a sorted list of 3000 items, what is the ' +
'<b><i>maximum</i></b> number of comparisons that may be needed to find the search value using a ' +
'binary search?<br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>11</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>8</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>12</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>10</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>9</span></td></tr></table></div>';
		answerText[16] = '<div class=\'default\'>C</div>';
		numberText[17] = '18.';
		questionText[17] = '<div class=\'default\'>If a search value exists in a sorted list of 1000 items, what is the ' +
'<b><i>maximum</i></b> number of comparisons that may be needed to find the search value using a ' +
'binary search?<br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>11</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>8</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>12</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>10</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>9</span></td></tr></table></div>';
		answerText[17] = '<div class=\'default\'>D</div>';
		numberText[18] = '19.';
		questionText[18] = '<div class=\'default\'>How many times will method&nbsp;&nbsp; <span class=\'font2\'>go()</span>&nbsp;&nbsp; ' +
'be called given the call&nbsp;&nbsp; <span class=\'font2\'>check( 10 )</span>&nbsp; ?<br><br><span ' +
'class=\'font2\'>public static void check( int n )<br>{<br>&nbsp; for( int i = 0; i &lt; n; i++ ' +
')<br>&nbsp;&nbsp;&nbsp; for( int j = 0; j &lt; n; j++ )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go( i * j ' +
');<br>}</span><br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>100</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>55</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>45</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>90</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>54</span></td></tr></table></div>';
		answerText[18] = '<div class=\'default\'>A</div>';
		numberText[19] = '20.';
		questionText[19] = '<div class=\'default\'>How many times will method&nbsp;&nbsp; <span class=\'font2\'>go()</span>&nbsp;&nbsp; ' +
'be called given the call&nbsp;&nbsp; <span class=\'font2\'>check( 10 )</span>&nbsp; ?<br><br><span ' +
'class=\'font2\'>public static void check( int n )<br>{<br>&nbsp; for( int i = 0; i &lt; n; i++ ' +
')<br>&nbsp;&nbsp;&nbsp; for( int j = i; j &lt; n; j++ )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go( i * j ' +
');<br>}</span><br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>100</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>55</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>45</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>90</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>54</span></td></tr></table></div>';
		answerText[19] = '<div class=\'default\'>B</div>';
		numberText[20] = '21.';
		questionText[20] = '<div class=\'default\'>How many times will method&nbsp;&nbsp; <span class=\'font2\'>go()</span>&nbsp;&nbsp; ' +
'be called given the call&nbsp;&nbsp; <span class=\'font2\'>check( 10 )</span>&nbsp; ?<br><br><span ' +
'class=\'font2\'>public static void check( int n )<br>{<br>&nbsp; for( int i = 0; i &lt; n; i++ ' +
')<br>&nbsp;&nbsp;&nbsp; for( int j = 0; j &lt; i; j++ )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go( i * j ' +
');<br>}</span><br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>100</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>55</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>45</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>90</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>54</span></td></tr></table></div>';
		answerText[20] = '<div class=\'default\'>C</div>';
		numberText[21] = '22.';
		questionText[21] = '<div class=\'default\'>How many times will method&nbsp;&nbsp; <span class=\'font2\'>go()</span>&nbsp;&nbsp; ' +
'be called given the call&nbsp;&nbsp; <span class=\'font2\'>check( 10 )</span>&nbsp; ?<br><br><span ' +
'class=\'font2\'>public static void check( int n )<br>{<br>&nbsp; for( int i = 0; i &lt; n; i++ ' +
')<br>&nbsp;&nbsp;&nbsp; for( int j = 0; j &lt; n-1; j++ )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go( i * j ' +
');<br>}</span><br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>100</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>55</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>45</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>90</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>54</span></td></tr></table></div>';
		answerText[21] = '<div class=\'default\'>D</div>';
		numberText[22] = '23.';
		questionText[22] = '<div class=\'default\'>How many times will method&nbsp;&nbsp; <span class=\'font2\'>go()</span>&nbsp;&nbsp; ' +
'be called given the call&nbsp;&nbsp; <span class=\'font2\'>check( 10 )</span>&nbsp; ?<br><br><span ' +
'class=\'font2\'>public static void check( int n )<br>{<br>&nbsp; for( int i = 0; i &lt; n; i++ ' +
')<br>&nbsp;&nbsp;&nbsp; for( int j = 0; j &lt; n-j; j++ )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go( i * j ' +
');<br>}</span><br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>40</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>55</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>45</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>50</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>145</span></td></tr></table></div>';
		answerText[22] = '<div class=\'default\'>D</div>';
		numberText[23] = '24.';
		questionText[23] = '<div class=\'default\'>How many times will method&nbsp;&nbsp; <span class=\'font2\'>go()</span>&nbsp;&nbsp; ' +
'be called given the call&nbsp;&nbsp; <span class=\'font2\'>check( 10 )</span>&nbsp; ?<br><br><span ' +
'class=\'font2\'>public static void check( int n )<br>{<br>&nbsp; for( int i = 0; i &lt; n-1; i++ ' +
')<br>&nbsp;&nbsp;&nbsp; for( int j = i; j &lt; n; j++ )<br>&nbsp;&nbsp;&nbsp; &nbsp; go( i * j ' +
');<br>}</span><br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>40</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>55</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>45</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>50</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>54</span></td></tr></table></div>';
		answerText[23] = '<div class=\'default\'>E</div>';
		numberText[24] = '25.';
		questionText[24] = '<div class=\'default\'>How many times will method&nbsp;&nbsp; <span class=\'font2\'>go()</span>&nbsp;&nbsp; ' +
'be called given the call&nbsp;&nbsp; <span class=\'font2\'>check( 10 )</span>&nbsp; ?<br><br><span ' +
'class=\'font2\'>public static void check( int n )<br>{<br>&nbsp; for( int i = 0; i &lt; n; i++ ' +
')<br>&nbsp;&nbsp;&nbsp; for( int j = 0; j &lt; n-i; j++ )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go( i * j ' +
');<br>}</span><br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>40</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>55</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>45</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>50</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>145</span></td></tr></table></div>';
		answerText[24] = '<div class=\'default\'>B</div>';
		numberText[25] = '26.';
		questionText[25] = '<div class=\'default\'>How many times will method&nbsp;&nbsp; <span class=\'font2\'>go()</span>&nbsp;&nbsp; ' +
'be called given the call&nbsp;&nbsp; <span class=\'font2\'>check( 10 )</span>&nbsp; ?<br><br><span ' +
'class=\'font2\'>public static void check( int n )<br>{<br>&nbsp; for( int i = 0; i &lt; n-1; i++ ' +
')<br>&nbsp;&nbsp;&nbsp; for( int j = i; j &lt; n; j++ )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go( i * j ' +
');<br>}</span><br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>40</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>55</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>45</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>54</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>145</span></td></tr></table></div>';
		answerText[25] = '<div class=\'default\'>D</div>';
		numberText[26] = '27.';
		questionText[26] = '<div class=\'default\'>How many times will method&nbsp;&nbsp; <span class=\'font2\'>go()</span>&nbsp;&nbsp; ' +
'be called given the call&nbsp;&nbsp; <span class=\'font2\'>check( 10 )</span>&nbsp; ?<br><br><span ' +
'class=\'font2\'>public static void check( int n )<br>{<br>&nbsp; for( int i = 0; i &lt; n; i++ ' +
')<br>&nbsp;&nbsp;&nbsp; for( int j = 0; j &lt; n+1; j++ )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go( i * j ' +
');<br>}</span><br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>40</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>55</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>45</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>50</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>110</span></td></tr></table></div>';
		answerText[26] = '<div class=\'default\'>E</div>';
		numberText[27] = '28.';
		questionText[27] = '<div class=\'default\'>Assuming that the following algorithm is supposed to return the count of the ' +
'numbers in the list larger than the first item, which of the following sections of code could ' +
'fill&nbsp;&nbsp;&nbsp; /* code */&nbsp; so that the algorithm would work as intended?<br><br><span ' +
'class=\'font2\'>public static int countEm( int&#091;&#093; list )<br>{<br>&nbsp; int cnt = ' +
'0;<br><br>&nbsp; </span> /* code */ <span class=\'font2\'><br><br>&nbsp; return ' +
'cnt;<br>}<br><br></span>I.<span class=\'font2\'><br>for( int i = 0; i &lt; list.length; i++ ' +
')<br>{<br>&nbsp; if( list&#091;0&#093; &gt; list&#091;i&#093; )<br>&nbsp;&nbsp;&nbsp; cnt = cnt + ' +
'1;<br>}<br><br></span>II.<span class=\'font2\'><br>for( int i = 0; i &lt; list.length; i++ ' +
')<br>{<br>&nbsp; if( list&#091;i&#093; &gt; list&#091;0&#093; )<br>&nbsp;&nbsp;&nbsp; cnt = cnt + ' +
'1;<br>}<br><br></span>III.<span class=\'font2\'><br>for( int i = 1; i &lt;= list.length; i++ ' +
')<br>{<br>&nbsp; if( list&#091;i-1&#093; &gt; list&#091;0&#093; )<br>&nbsp;&nbsp;&nbsp; cnt = cnt + ' +
'1;<br>}</span><br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>I only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>I and II only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>II and III only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>I and III only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>III only</span></td></tr></table></div>';
		answerText[27] = '<div class=\'default\'>C</div>';
		numberText[28] = '29.';
		questionText[28] = '<div class=\'default\'>Assuming that the following code represents a selection sort designed to sort the ' +
'items in list in ascending order, which of the following sections of code shown below could ' +
'fill&nbsp;&nbsp;&nbsp; /* code */&nbsp; so that the algorithm would work as intended?<br><br><span ' +
'class=\'font2\'>public static void sort( int&#091;&#093; list )<br>{<br>&nbsp; for( int i=0; i &lt; ' +
'list.length-1; i++)<br>&nbsp; {<br>&nbsp;&nbsp;&nbsp; int min = i;<br>&nbsp;&nbsp;&nbsp; for( int j = ' +
'i+1; j &lt; list.length; j++)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>/* ' +
'code */<span class=\'font2\'><br>&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; if( min != ' +
'i)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int temp = ' +
'list&#091;min&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; list&#091;min&#093; = ' +
'list&#091;i&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; list&#091;i&#093; = temp;<br>&nbsp;&nbsp;&nbsp; ' +
'}<br>&nbsp; }<br>}<br><br></span>I.<span class=\'font2\'><br>if( list&#091;j&#093; &lt; ' +
'list&#091;min&#093; )<br>&nbsp; min = j;<br><br></span>II.<span class=\'font2\'><br>if( list&#091;j&#093; ' +
'&gt; list&#091;min&#093; )<br>&nbsp; min = j;<br><br></span>III.<span class=\'font2\'><br>if( list&#091;i&#093; ' +
'&lt; list&#091;min&#093; )<br>&nbsp; min = i;</span><br></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'>I only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'>I and II only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'>II and III only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'>I and III only</span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'>III only</span></td></tr></table></div>';
		answerText[28] = '<div class=\'default\'>A</div>';
		numberText[29] = '30.';
		questionText[29] = '<div class=\'default\'>Assuming that the following code represents an insertion sort designed to sort the ' +
'items in list in ascending order, which of the following sections of code shown below could ' +
'fill&nbsp;&nbsp;&nbsp; /* code */&nbsp; so that the algorithm would work as intended?<b><span ' +
'style=\'font-size:12pt\'><br><br></span></b><span class=\'font2\'>public static void sort( int&#091;&#093; x ' +
')<br>{<br>&nbsp;&nbsp; for(int i = 1; i &lt; x.length; i++)<br>&nbsp;&nbsp; { ' +
'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int val = x&#091;i&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int j ' +
'= i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while(&nbsp; </span>/* code */&nbsp; <span class=\'font2\'> )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x&#091;j&#093; = ' +
'x&#091;j-1&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'j--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x&#091;j&#093; = ' +
'val;<br>&nbsp;&nbsp; }<br>}<br></span></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'><span class=\'font2\'>j &gt; 0 &amp;&amp; x&#091;j-1&#093; &gt; ' +
'val</span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'>j &gt; 0 &amp;&amp; x&#091;j-1&#093; &lt; ' +
'val</span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'>j &gt; 0 &amp;&amp; x&#091;j-1&#093; == ' +
'val</span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'>j &gt; 0 &amp;&amp; x&#091;j&#093; &lt; ' +
'val</span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'>j &gt; 0 &amp;&amp; x&#091;j&#093; &gt; ' +
'val</span></span></td></tr></table></div>';
		answerText[29] = '<div class=\'default\'>A</div>';
		numberText[30] = '31.';
		questionText[30] = '<div class=\'default\'>Assuming that the following code represents an insertion sort designed to sort the ' +
'items in list in descending order, which of the following sections of code shown below could ' +
'fill&nbsp;&nbsp;&nbsp; <br>/* code */&nbsp; so that the algorithm would work as intended?<b><span ' +
'style=\'font-size:12pt\'><br><br></span></b><span class=\'font2\'>public static void sort( int&#091;&#093; x ' +
')<br>{<br>&nbsp;&nbsp; for(int i = 1; i &lt; x.length; i++)<br>&nbsp;&nbsp; { ' +
'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int val = x&#091;i&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int j ' +
'= i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while(&nbsp; </span>/* code */&nbsp; <span class=\'font2\'> )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x&#091;j&#093; = ' +
'x&#091;j-1&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'j--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x&#091;j&#093; = ' +
'val;<br>&nbsp;&nbsp; }<br>}<br></span></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'><span class=\'font2\'>j &gt; 0 &amp;&amp; x&#091;j-1&#093; &gt; ' +
'val</span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'>j &gt; 0 &amp;&amp; x&#091;j-1&#093; &lt; ' +
'val</span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'>j &gt; 0 &amp;&amp; x&#091;j-1&#093; == ' +
'val</span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'>j &gt; 0 &amp;&amp; x&#091;j&#093; &lt; ' +
'val</span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'>j &gt; 0 &amp;&amp; x&#091;j&#093; &gt; ' +
'val</span></span></td></tr></table></div>';
		answerText[30] = '<div class=\'default\'>B</div>';
		numberText[31] = '32.';
		questionText[31] = '<div class=\'default\'>Assuming that the following code represents a merge sort designed to sort the ' +
'items in list in ascending order, which of the following sections of code shown below could ' +
'fill&nbsp;&nbsp;&nbsp; <br>/* code */&nbsp; so that the algorithm would work as intended?<span ' +
'style=\'font-size:12pt\'><b><br></b></span><span class=\'font2\'><span style=\'font-size:12pt\'><br></span>public ' +
'void sort( int&#091;&#093; list, int front, int back)<br>{<br>&nbsp;&nbsp; int mid =&nbsp; </span>/* ' +
'code */ <span class=\'font2\'><br>&nbsp;&nbsp; if( mid==front) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'return;&nbsp; <br>&nbsp;&nbsp; sort(list, front, mid);<br>&nbsp;&nbsp; sort(list, mid, ' +
'back);<br>&nbsp;&nbsp; help(list, front, back);<br>}<br><br>private void help(int&#091;&#093; list, ' +
'int front, int back)&nbsp; <br>{<br>&nbsp;&nbsp; int&#091;&#093; temp = new ' +
'int&#091;back-front&#093;;<br>&nbsp;&nbsp; int i = front;<br>&nbsp;&nbsp; int j =&nbsp; </span>/* ' +
'code */ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\'font2\'>int k = 0;<br>&nbsp;&nbsp; int mid ' +
'= j;<br>&nbsp;&nbsp; while( i &lt; mid &amp;&amp; j &lt; back)<br>&nbsp;&nbsp; ' +
'{<br>&nbsp;&nbsp;&nbsp;&nbsp; if(list&#091;i&#093; &lt; ' +
'list&#091;j&#093;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; temp&#091;k++&#093; = ' +
'list&#091;i++&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'temp&#091;k++&#093; = list&#091;j++&#093;;<br>&nbsp;&nbsp; }<br><br>&nbsp;&nbsp; while(i &lt; mid) ' +
'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; temp&#091;k++&#093; = list&#091;i++&#093;;<br>&nbsp;&nbsp; while(j ' +
'&lt; back) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; temp&#091;k++&#093; = ' +
'list&#091;j++&#093;;<br>&nbsp;&nbsp; for(i = 0; i &lt; back-front; ' +
'++i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; list&#091;front+i&#093; = temp&#091;i&#093;;<br>} ' +
'</span><b><br></b></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'><span class=\'font2\'>front + back /2;</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span class=\'default\'><span class=\'font2\'>front+ (back ' +
'/ 2);</span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'>front / 2;</span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'>( front + back ) / 2;</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span class=\'default\'><span class=\'font2\'>back / ' +
'2;</span></span></td></tr></table></div>';
		answerText[31] = '<div class=\'default\'>D</div>';
		numberText[32] = '33.';
		questionText[32] = '<div class=\'default\'>Assuming that the following code represents a binary search designed to locate the ' +
'position of val in list, which of the following sections of code shown below could ' +
'fill&nbsp;&nbsp;&nbsp; <br>/* code */&nbsp; so that the algorithm would work as intended?<b><span ' +
'style=\'font-size:12pt\'><br><br></span></b><span class=\'font2\'>public static int search( int&#091;&#093; ' +
'list, int val )<br>{<br>&nbsp;&nbsp; int len = list.length; <br>&nbsp;&nbsp; int bot = ' +
'0;<br>&nbsp;&nbsp; int top = len - 1;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp; int middle = ' +
'0;<br>&nbsp;&nbsp; while( bot &lt;= top )&nbsp; <br>&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'middle = </span>/* code */ <span class=\'font2\'><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if( ' +
'list&#091;middle&#093; == val )&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ' +
'middle;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'if( list&#091;middle&#093; &gt; val ' +
')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; top = middle - ' +
'1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bot = middle + ' +
'1;<br>&nbsp;&nbsp; }<br>&nbsp;&nbsp; return -1;<br>}<span ' +
'style=\'font-size:12pt\'><br></span></span></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'><span class=\'font2\'>bot + top / 2;</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span class=\'default\'><span class=\'font2\'>( bot + top ' +
') / 2;</span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'>( bot + ( top / 2 );</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span class=\'default\'><span class=\'font2\'>bot&nbsp; / ' +
'2;</span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'>top&nbsp; / 2;</span></span></td></tr></table></div>';
		answerText[32] = '<div class=\'default\'>B</div>';
		numberText[33] = '34.';
		questionText[33] = '<div class=\'default\'>Assuming that the following code represents a quick sort designed to sort the ' +
'items in list in ascending order, which of the following sections of code shown below could ' +
'fill&nbsp;&nbsp;&nbsp; <br>/* code */&nbsp; so that the algorithm would work as intended?<span ' +
'style=\'font-size:12pt\'><b><br></b></span><span class=\'font2\'><span style=\'font-size:12pt\'><br></span>public ' +
'static void sort(int&#091;&#093; x, int low, int high)<br>{<br>&nbsp; if (low &lt; high)<br>&nbsp; ' +
'{<br>&nbsp;&nbsp;&nbsp; int spot = go( x, low, high);<br>&nbsp;&nbsp;&nbsp; sort( x, low, ' +
'spot);<br>&nbsp;&nbsp;&nbsp; sort( x, spot+1, high);<br>&nbsp; }<br>}</span><span class=\'font4\'><span style=\'font-size:28pt\'><br></span></span><span ' +
'class=\'font2\'><br>int partition( int&#091;&#093; x, int low, int high) <br>{<br>&nbsp; int pivot = ' +
'x&#091;low&#093;; <br>&nbsp; int bot = low-1; <br>&nbsp; int top = ' +
'high+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp; while( bot &lt; top) ' +
'<br>&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; while( x&#091;--top&#093; &gt; ' +
'pivot); <br>&nbsp;&nbsp;&nbsp; while( x&#091;++bot&#093; &lt; pivot);<br>&nbsp;&nbsp;&nbsp; </span>/* ' +
'code */ <span class=\'font2\'><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return top;<br>&nbsp;&nbsp;&nbsp; int ' +
'temp = x&#091;bot&#093;;<br>&nbsp;&nbsp;&nbsp; x&#091;bot&#093; = ' +
'x&#091;top&#093;;<br>&nbsp;&nbsp;&nbsp; x&#091;top&#093; = temp;<br>&nbsp; }<br>}</span><span ' +
'class=\'font4\'><span style=\'font-size:24pt\'><br></span></span></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'><span class=\'font2\'>if( ! (bot &lt; top) )</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span class=\'default\'><span class=\'font2\'>if( bot &gt;= ' +
'top )</span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'>if( bot == top )</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span class=\'default\'>A and B only</span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span class=\'default\'>A and C ' +
'only</span></td></tr></table></div>';
		answerText[33] = '<div class=\'default\'>D</div>';
		numberText[34] = '35.';
		questionText[34] = '<div class=\'default\'>What is output by the following code segment?<b><span ' +
'style=\'font-size:12pt\'><br><br></span></b><span class=\'font2\'>int&#091;&#093; x = ' +
'{2,3,-4,5,1,-2,3,9,0,11,12,12,3,54,32};<br>Arrays.sort( x );<br>System.out.println( x&#091;0&#093; ' +
');<br></span></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'><span class=\'font2\'>0</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span class=\'default\'><span class=\'font2\'>-2</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span class=\'default\'><span class=\'font2\'>54</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span class=\'default\'><span class=\'font2\'>32</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span class=\'default\'><span ' +
'class=\'font2\'>-4</span></span></td></tr></table></div>';
		answerText[34] = '<div class=\'default\'>E</div>';
		numberText[35] = '36.';
		questionText[35] = '<div class=\'default\'>What is output by the following code segment?<b><span ' +
'style=\'font-size:12pt\'><br><br></span></b><span class=\'font2\'>int&#091;&#093; x = ' +
'{2,3,-4,5,1,-2,3,9,0,11,12,12,3,54,32};<br>Arrays.sort( x );<br>System.out.println( x&#091; ' +
'x.length-1 &#093; );<br></span></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'><span class=\'font2\'>0</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span class=\'default\'><span class=\'font2\'>-2</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span class=\'default\'><span class=\'font2\'>54</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span class=\'default\'><span class=\'font2\'>32</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span class=\'default\'><span ' +
'class=\'font2\'>-4</span></span></td></tr></table></div>';
		answerText[35] = '<div class=\'default\'>C</div>';
		numberText[36] = '37.';
		questionText[36] = '<div class=\'default\'>What is output by the following code segment?<b><span ' +
'style=\'font-size:12pt\'><br><br></span></b><span class=\'font2\'>int&#091;&#093; x = ' +
'{2,3,-4,5,1,-2,3,9,0,11,12,12,3,54,32};<br>Arrays.sort( x );<br>System.out.println( ' +
'Arrays.binarySearch( x, 11 ) );<br></span></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'><span class=\'font2\'>11</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span class=\'default\'><span class=\'font2\'>9</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span class=\'default\'><span class=\'font2\'>7</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span class=\'default\'><span class=\'font2\'>10</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span class=\'default\'><span ' +
'class=\'font2\'>8</span></span></td></tr></table></div>';
		answerText[36] = '<div class=\'default\'>D</div>';
		numberText[37] = '38.';
		questionText[37] = '<div class=\'default\'>What is output by the following code segment?<b><span ' +
'style=\'font-size:12pt\'><br><br></span></b><span class=\'font2\'>int&#091;&#093; x = ' +
'{2,3,-4,5,1,-2,3,9,0,11,12,12,3,54,32};<br>Arrays.sort( x );<br>System.out.println( ' +
'Arrays.binarySearch( x, 3 ) );<br></span></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'><span class=\'font2\'>11</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span class=\'default\'><span class=\'font2\'>9</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span class=\'default\'><span class=\'font2\'>7</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span class=\'default\'><span class=\'font2\'>10</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span class=\'default\'><span ' +
'class=\'font2\'>8</span></span></td></tr></table></div>';
		answerText[37] = '<div class=\'default\'>C</div>';
		numberText[38] = '39.';
		questionText[38] = '<div class=\'default\'>What is output by the following code segment?<b><span ' +
'style=\'font-size:12pt\'><br><br></span></b><span class=\'font2\'>Integer&#091;&#093; x = ' +
'{2,3,-4,5,1,-2,3,9,0,11,12,12,3,54,32};<br>ArrayList&lt;Integer&gt; list;<br>list = new ' +
'ArrayList&lt;Integer&gt;(Arrays.asList(x));<br>System.out.println( list.indexOf(0) ' +
');<br></span></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'><span class=\'font2\'>11</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span class=\'default\'><span class=\'font2\'>9</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span class=\'default\'><span class=\'font2\'>7</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span class=\'default\'><span class=\'font2\'>10</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span class=\'default\'><span ' +
'class=\'font2\'>8</span></span></td></tr></table></div>';
		answerText[38] = '<div class=\'default\'>E</div>';
		numberText[39] = '40.';
		questionText[39] = '<div class=\'default\'>What is output by the following code segment?<b><span ' +
'style=\'font-size:12pt\'><br><br></span></b><span class=\'font2\'>Integer&#091;&#093; x = ' +
'{2,3,-4,5,1,-2,3,9,0,11,12,12,3,54,32};<br>ArrayList&lt;Integer&gt; list;<br>list = new ' +
'ArrayList&lt;Integer&gt;(Arrays.asList(x));<br>Collections.sort( list );<br>System.out.println( ' +
'list.indexOf(0) );<br></span></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'><span class=\'font2\'>2</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span class=\'default\'><span class=\'font2\'>4</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span class=\'default\'><span class=\'font2\'>5</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span class=\'default\'><span class=\'font2\'>3</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span class=\'default\'><span ' +
'class=\'font2\'>6</span></span></td></tr></table></div>';
		answerText[39] = '<div class=\'default\'>A</div>';
		numberText[40] = '41.';
		questionText[40] = '<div class=\'default\'>What is output by the following code segment?<b><span ' +
'style=\'font-size:12pt\'><br><br></span></b><span class=\'font2\'>int&#091;&#093; x = ' +
'{2,3,-4,5,1,-2,3,9,0,11,12,12,3,54,32};<br>Arrays.sort( x );<br>System.out.println( ' +
'Arrays.binarySearch( x, 4 ) );<br></span></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'><span class=\'font2\'>-1</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span class=\'default\'><span class=\'font2\'>-8</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span class=\'default\'><span class=\'font2\'>-9</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span class=\'default\'><span class=\'font2\'>-4</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span class=\'default\'><span class=\'font2\'>there is no ' +
'output due to a runtime exception</span></span></td></tr></table></div>';
		answerText[40] = '<div class=\'default\'>C</div>';
		numberText[41] = '42.';
		questionText[41] = '<div class=\'default\'>What is output by the following code segment?<b><span ' +
'style=\'font-size:12pt\'><br><br></span></b><span class=\'font2\'>int&#091;&#093; x = ' +
'{2,3,-4,5,1,-2,3,9,0,11,12,12,3,54,32};<br>Arrays.sort( x );<br>System.out.println( ' +
'Arrays.binarySearch( x, -50 ) );<br></span></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'><span class=\'font2\'>-1</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span class=\'default\'><span class=\'font2\'>-8</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span class=\'default\'><span class=\'font2\'>-9</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span class=\'default\'><span class=\'font2\'>-4</span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span class=\'default\'><span class=\'font2\'>there is no ' +
'output due to a runtime exception</span></span></td></tr></table></div>';
		answerText[41] = '<div class=\'default\'>A</div>';
		numberText[42] = '43.';
		questionText[42] = '<div class=\'default\'>What is output by the following code segment?<b><span ' +
'style=\'font-size:12pt\'><br></span><br></b><span class=\'font2\'>public static void main(String&#091;&#093; ' +
'args)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int&#091;&#093; ints = ' +
'{10,9,8,7,5,6,3,4,0};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'sort(ints,0,0,0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'System.out.println(Arrays.toString(ints));<br>}</span><b><span class=\'font2\'><br></span><br></b><span ' +
'class=\'font2\'>public static void sort( int&#091;&#093; ints,int a, int b, int c ' +
')<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(a==ints.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'if(b==ints.length)<br>&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int save = ints&#091;c&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ints&#091;c&#093; = ' +
'ints&#091;a&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ints&#091;a&#093; ' +
'= save;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'sort(ints,a+1,a+1,a+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else ' +
'if(ints&#091;b&#093;&lt;ints&#091;c&#093;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort(ints,a,b+1,b);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'sort(ints,a,b+1,c);<br>}<br></span></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'><span style=\'font-size:10pt\'><span class=\'font5\'>&#091;10, 9, 8, 7, 6, 5, ' +
'4, 3, 0&#093;</span></span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'><span style=\'font-size:10pt\'><span class=\'font5\'>&#091;0, 3, 4, 5, 6, 7, 8, 9, ' +
'10&#093;</span></span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'><span style=\'font-size:10pt\'>&#091;10, 9, 8, 7, 5, 6, 3, 4, ' +
'0&#093;</span></span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'><span style=\'font-size:10pt\'>&#091;0, 4, 3, 6, 5, 7, 8, 9, ' +
'10&#093;</span></span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'>there is no output due to a runtime ' +
'exception</span></span></td></tr></table></div>';
		answerText[42] = '<div class=\'default\'>B</div>';
		numberText[43] = '44.';
		questionText[43] = '<div class=\'default\'>What is output by the following code segment?<b><span ' +
'style=\'font-size:12pt\'><br></span><br></b><span class=\'font2\'>public static void main(String&#091;&#093; ' +
'args)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int&#091;&#093; ints = ' +
'{10,9,8,7,5,6,3,4,0};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'sort(ints,0,0,0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'System.out.println(Arrays.toString(ints));<br>}</span><b><span class=\'font2\'><br></span><br></b><span ' +
'class=\'font2\'>public static void sort( int&#091;&#093; ints,int a, int b, int c ' +
')<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(a==ints.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'if(b==ints.length)<br>&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int save = ints&#091;c&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ints&#091;c&#093; = ' +
'ints&#091;a&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ints&#091;a&#093; ' +
'= save;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'sort(ints,a+1,a+1,a+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else ' +
'if(ints&#091;b&#093;&gt;ints&#091;c&#093;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort(ints,a,b+1,b);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'sort(ints,a,b+1,c);<br>}<br></span></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'><span style=\'font-size:10pt\'><span class=\'font5\'>&#091;10, 9, 8, 7, 6, 5, ' +
'4, 3, 0&#093;</span></span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span ' +
'class=\'default\'><span style=\'font-size:10pt\'><span class=\'font5\'>&#091;0, 3, 4, 5, 6, 7, 8, 9, ' +
'10&#093;</span></span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'><span style=\'font-size:10pt\'>&#091;10, 9, 8, 7, 5, 6, 3, 4, ' +
'0&#093;</span></span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'><span style=\'font-size:10pt\'>&#091;0, 4, 3, 6, 5, 7, 8, 9, ' +
'10&#093;</span></span></span></td></tr><tr valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span ' +
'class=\'default\'><span class=\'font2\'>there is no output due to a runtime ' +
'exception</span></span></td></tr></table></div>';
		answerText[43] = '<div class=\'default\'>A</div>';
		numberText[44] = '45.';
		questionText[44] = '<div class=\'default\'>Which sorting algorithm does the following code implement?<b><span ' +
'style=\'font-size:12pt\'><br></span><br></b><span class=\'font2\'>public static void main(String&#091;&#093; ' +
'args)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int&#091;&#093; ints = ' +
'{10,9,8,7,5,6,3,4,0};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'sort(ints,0,0,0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'System.out.println(Arrays.toString(ints));<br>}</span><b><span class=\'font2\'><br></span><br></b><span ' +
'class=\'font2\'>public static void sort( int&#091;&#093; ints,int a, int b, int c ' +
')<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(a==ints.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'if(b==ints.length)<br>&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int save = ints&#091;c&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ints&#091;c&#093; = ' +
'ints&#091;a&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ints&#091;a&#093; ' +
'= save;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'sort(ints,a+1,a+1,a+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else ' +
'if(ints&#091;b&#093;&gt;ints&#091;c&#093;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort(ints,a,b+1,b);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' +
'sort(ints,a,b+1,c);<br>}<br></span></div><div class=\'default\'><table cellpadding=\'0\' cellspacing=\'0\' width=\'95%\' border=\'0\'><tr valign=\'baseline\'><td width=\'4%\'><div class=\'choice\'>a.</div></td><td ' +
'width=\'96%\'><span class=\'default\'><span class=\'font2\'><span style=\'font-size:10pt\'>quicksort</span></span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>b.</div></td><td><span class=\'default\'><span style=\'font-size:10pt\'><span class=\'font5\'>merge sort</span></span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>c.</div></td><td><span class=\'default\'><span class=\'font2\'><span style=\'font-size:10pt\'>selection sort</span></span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>d.</div></td><td><span class=\'default\'><span class=\'font2\'><span style=\'font-size:10pt\'>radix sort</span></span></span></td></tr><tr ' +
'valign=\'baseline\'><td><div class=\'choice\'>e.</div></td><td><span class=\'default\'><span class=\'font2\'>none of the ' +
'above</span></span></td></tr></table></div>';
		answerText[44] = '<div class=\'default\'>C</div>';

		FixMR(f);
		FixMTF(f);
		index = 0;
		for (i=0; i < f.length; ++i) {
			if (f.elements[i].name.indexOf(":") > 0) {
				if (listMap.charAt(index) == "1") {
					listIndex = f.elements[i].selectedIndex;
					text = StripSpaces(f.elements[i].options[listIndex].value);
				} else {
					f.elements[i].value = StripSpaces(f.elements[i].value);
					text = f.elements[i].value;
				}

				if (text.length == 0)
					++numBlank;
				++index;
			}
		}

		if (numBlank > 0) {
			if (numBlank == 1)
				msg = "1 question";
			else
				msg = numBlank + " questions";
			if (!confirm("You have not answered " + msg +
				"  Are you sure you want to end the test?"))
				return(false);
		}

		index = 0;
		var scoreDetails = new Array();
		for (i=0; i < f.length; ++i) {
			if (f.elements[i].name.indexOf(":") > 0) {
				if (listMap.charAt(index) == "1") {
					listIndex = f.elements[i].selectedIndex;
					text = f.elements[i].options[listIndex].value;
				} else
					text = f.elements[i].value;

				numPossible = ptsMap[index] * MAGIC;
				if (ansMap[index] == "") {
					scoreDetails[index] = "--";
					prefixText[index] = "<img src='review_11_sorts_and_files/nograde.gif' align='middle'>";
					isCorrect = false;
					++numSubjective;
				} else {
					var scoreResult = ScoreAnswer(index, text, numPossible);
					numCorrect = scoreResult.numPoints;
					isCorrect = scoreResult.isCorrect;

					scoreDetails[index] = (Math.round(numCorrect * 100 / MAGIC) / 100).toString();
					prefixText[index] = BuildPrefixText(index, text, isCorrect);

					totalCorrect += numCorrect;
					totalPossible += numPossible;
				}

				if (showFeedback && feedbackText[index] != null && feedbackText[index].length > 0) {
					if (qtypeMap.charAt(index) == "2")
						feedbackIndex = text.charCodeAt(0) - 65;
					else
						feedbackIndex = (isCorrect) ? 0 : 1;
					feedbackText[index] = GetFeedback(feedbackText[index], feedbackIndex);
				}
				responseText[index] = TranslateHtmlString(text);

				scoreDetails[index] += " / " + (numPossible / MAGIC);
				++index;
			}
		}

		numCorrect = Math.round(totalCorrect * 100 / MAGIC) / 100;
		numPossible = Math.round(totalPossible * 100 / MAGIC) / 100;
		if (totalPossible > 0)
			scorePercent = Math.round(100.0 * totalCorrect / totalPossible);
		else
			scorePercent = 0;

		studentName = TranslateHtmlString(f.student_name.value);

		document.writeln("<html>\n<head>");
		document.writeln("<title>" + titleString + "</title>");
		document.writeln("<style type='text/css'>");
		for (i=0; i < styleText.length; ++i)
			document.writeln("\t" + styleText[i]);
		document.writeln("</style>\n</head>");

		document.writeln("<body bgcolor='#FFFFFF' style='background-image:url(review_11_sorts_and_files/header.gif); background-repeat:no-repeat'>");
		document.writeln("<div style='font-size:12pt; font-family:\"Times New Roman\", \"Times\", serif; color:#000000;'>");

		document.writeln("<b>Name:</b> " + studentName + "<br>");
		document.write("<b>Score:</b> " + numCorrect + " / " + numPossible +
				" points (" + scorePercent + "%)");
		if (numSubjective > 0) {
			document.write("&nbsp;&nbsp;&nbsp;&nbsp; [" + numSubjective + " open-ended ");
			if (numSubjective == 1)
				document.write("question");
			else
				document.write("questions");
			document.write(" not graded]");
		}
		document.writeln("</div><br><br>");
		document.writeln("<div class='title'>" + titleString + "</div><br>");
		document.writeln("<table align='left' width='100%' border='0' cellpadding='0' cellspacing='0'>");

		currentInstruction = 0;
		currentNarrative = 0;
		for (i=0; i < numQuestions; ++i) {
			if (currentInstruction < numInstructions) {
				if (instructionIndex[currentInstruction] == i) {
					document.writeln("<tr><td colspan='3'><br>");
					document.writeln(instructionText[currentInstruction]);
					document.writeln("<div class='spacer'>&nbsp;</div>");
					document.writeln("</td></tr>");
					++currentInstruction;
				}
			}

			if (currentNarrative < numNarratives) {
				if (narrativeIndex[currentNarrative] == i) {
					document.writeln("<tr><td></td><td></td><td>");
					document.writeln(narrativeText[currentNarrative]);
					document.writeln("<div class='spacer'>&nbsp;</div>");
					document.writeln("</td></tr>");
					++currentNarrative;
				}
			}

			document.writeln("<tr valign='baseline'>");
			document.writeln("<td nowrap><p class='default'>" + prefixText[i] + "</p></td>");
			document.writeln("<td nowrap><p class='qnumber'>&nbsp;" + numberText[i] + "&nbsp;</p></td>");
			document.writeln("<td width='100%'>" + questionText[i]);
			document.writeln("<div style='font-size:2pt'></div><br>");
			document.writeln("<table width='100%' valign='baseline' cellpadding=0 cellspacing=0 border=0>");
			if (listMap.charAt(i) != "1") {
				document.writeln("<tr valign='baseline'><td><p class='default'><b>RESPONSE:&nbsp;</b></p></td>");
				document.writeln("<td width='100%'><p class='default'>" + responseText[i] + "</p></td></tr>");
			}
			document.writeln("<tr valign='baseline'><td><p class='default'><b>ANSWER:&nbsp;</b></p></td>");
			document.writeln("<td width='100%'>" + answerText[i] + "</td></tr>");
			document.writeln("<tr valign='baseline'><td><p class='default'><b>POINTS:&nbsp;</b></p></td>");
			document.writeln("<td width='100%'>" + scoreDetails[i] + "</td></tr>");
			if (showFeedback && feedbackText[i] != null) {
				document.writeln("<tr valign='baseline'><td><p class='default'><b>FEEDBACK:&nbsp;</b></p></td>");
				document.writeln("<td width='100%'><p class='default'>" + feedbackText[i] + "</p></td></tr>");
			}
			if (showRef) {
				document.writeln("<tr valign='baseline'><td><p class='default'><b>REF:&nbsp;</b></p></td>");
				document.writeln("<td width='100%'><p class='default'>" + refText[i] + "</p></td></tr>");
			}
			document.writeln("</table>");
			document.writeln("<div class='spacer'>&nbsp;</div></td></tr>");
		}

		document.writeln("</table>");
		document.writeln("<br clear='all'>");
		document.writeln("<table align='left' width='100%' cellpadding=0 cellspacing=0 border=0>");
		document.writeln("<tr><td bgcolor='#000000'><div style='font-size:1pt'>&nbsp;</div></td></tr>");
		document.write("<tr><td valign='top'><a href='" + htmlUrl + "'>");
		document.writeln("<img src='review_11_sorts_and_files/retake.gif' border=0 alt='Retake Test'></a></td>");
		document.writeln("</tr></table>");

		document.writeln("</body>");
		document.writeln("</html>");
		document.close();

		return(false);
	}

	function BuildPrefixText(answerIndex, responseText, isCorrect)
	{
		var	text;
		var	listIndex;

		text = "<tt>"
		if (isCorrect)
			text += "<img src='review_11_sorts_and_files/correct.gif' align='middle'>"
		else
			text += "<img src='review_11_sorts_and_files/wrong.gif' align='middle'>"

		if (listMap.charAt(answerIndex) == "1") {
			if (responseText.length == 0)
				responseText = "&nbsp;";
			text += "&nbsp;<u>&nbsp;" + responseText + "&nbsp;</u>";
		}

		text += "</tt>"
		return(text);
	}

	function TranslateHtmlString(text)
	{
		var	newText;
		var	replaceString;
		var	position;
		var	length;
		var	breakPos;
		var	skipExtra;
		var	i;

		newText = "";
		position = 0;
		length = text.length;
		while (position < length) {
			skipExtra = 0;
			breakPos = -1;
			for (i=position; i < length && breakPos < 0; ++i) {
				switch(text.charAt(i)) {
					case '>':
						replaceString = "&gt;";
						breakPos = i;
						break;
					case '<':
						replaceString = "&lt;";
						breakPos = i;
						break;
					case '&':
						replaceString = "&amp;";
						breakPos = i;
						break;
					case '\r':
						if ((i + 1) < length && text.charAt(i + 1) == '\n')
							skipExtra = 1;
						replaceString = "<br>";
						breakPos = i;
						break;
					case '\n':
						replaceString = "<br>";
						breakPos = i;
						break;
					case ' ':
						if ((i + 1 < length) && text.charAt(i + 1) == ' ') {
							replaceString = "&nbsp;";
							breakPos = i;
						}
						break;
				}
			}

			if (breakPos < 0) {
				newText += text.substring(position, length);
				position = length;
			} else {
				if (breakPos > position)
					newText += text.substring(position, breakPos);
				newText += replaceString;
				position = breakPos + 1 + skipExtra;
			}
		}

		return(newText);
	}

	function GetFeedback(text, index)
	{
		var list = text.split("\t");
		if (index >= 0 && index < list.length)
			return(list[index]);
			
		return("");
	}

	function TranslateAnswer(s, answerIndex)
	{
		return(s);
	}

	function ScoreAnswer(answerIndex, responseText, pointsPossible)
	{
		var answerText = TranslateAnswer(ansMap[answerIndex], answerIndex);
		var qtype = qtypeMap.charAt(answerIndex);
		var nrExactMatch = false;
		var result = new Array();

		result.numPoints = 0;
		result.isCorrect = false;

		if (qtype == "3" && answerText.substring(0, 2) == "p:") {
			answerText = answerText.substr(2);
			if (responseText.toUpperCase() == answerText.toUpperCase())
				result.isCorrect = true;
			else
				result.numPoints = MultiResponseCompare(responseText, answerText, pointsPossible);
		} else if (qtype == "6") {
			if (answerText.substring(0, 2) == "==") {
				answerText = answerText.substr(2);
				nrExactMatch = true;
			}
			if (NumericCompare(responseText, answerText, nrExactMatch))
				result.isCorrect = true;
		} else if (qtype == "7") {
			if (CompletionCompare(responseText, answerText))
				result.isCorrect = true;
		} else if (responseText.toUpperCase() == answerText.toUpperCase())
			result.isCorrect = true;

		if (result.isCorrect)
			result.numPoints = pointsPossible;

		return(result);
	}

	function StripSpaces(s)
	{
		var	len;
		var	i;

		len = s.length;
		for (i=len - 1; i >= 0 && s.charAt(i) == " "; --i)
			len = i;

		if (len == 0)
			s = "";
		else if (len != s.length)
			s = s.substring(0, len);

		return(s);
	}

	function MultiResponseCompare(responseText, answerText, pointsPossible)
	{
	}

	function NumericCompare(response, answer, exactMatch)
	{
	}


	function CompletionCompare(responseText, answerText)
	{
		return(false);
	}

	function FixMTF(f)
	{
	}

	function FixMR(f)
	{
	}

	function AllowReset()
	{
		return(window.confirm("Do you want to clear all of your answers?"));
	}

	function Restart()
	{
		if (AllowReset()) {
			document.TestForm.onreset = function() { };
			document.TestForm.reset();
			document.TestForm.onreset = function() { AllowReset(); };
		}
	}
// -->
</script>
</head>
<body onResize='if(document.layers && navigator.appVersion.indexOf("Win") < 0){history.go(0);}'
bgcolor='#FFFFFF' style='background-image:url(review_11_sorts_and_files/header.gif); background-repeat:no-repeat'>
<noscript>
	<h3><font color='#FF0000'>Javascript not enabled</font></h3>
</noscript>
<script type='text/javascript' language='JavaScript'>
<!--
if (navigator.appName.indexOf("Netscape") >= 0) {
	if (parseInt(navigator.appVersion.charAt(0)) < 4)
		alert("This document requires Netscape Navigator version 4.0 or later.");
} else if (navigator.appName.indexOf("Explorer") >= 0) {
	if (parseInt(navigator.appVersion.charAt(0)) < 4)
		alert("This document requires Internet Explorer version 4.0 or later.");
}
// -->
</script>
<form name='TestForm' onReset='return(AllowReset())'>
<table align='left' width='100%' border='0' cellspacing='0'>
    <tr valign='top'>
	<td>
	    <div class='spacer'>&nbsp;</div>
	    <div class='default'>
	        <b>Name:</b>&nbsp;<input type='text' name='student_name' size='30'>
	    </div>
	    <div class='spacer'>&nbsp;</div>
	    <br>
	    <p class="title">Review 11 Sorts and Searches</p>
	</td>
    </tr>
</table>
<br clear='all'>

<table align='left' width='100%' border='0' cellpadding='0' cellspacing='0'>
<tr valign='top'>
	<td colspan='3'><br>
<div class='default'><b>Multiple Choice</b><span style='font-size:10pt'><br></span><i>Identify the
choice that best completes the statement or answers the question.</i></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:1' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;1.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Which searching algorithm starts looking for a particular value at the beginning
of a list and has the potential to examine every item in the list?<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>merge sort</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>quick sort</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span class='default'>binary
search</span></td></tr><tr valign='baseline'><td><div class='choice'>d.</div></td><td><span
class='default'>linear search</span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'>insertion sort</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:2' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;2.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Which searching algorithm starts looking for a particular value in the middle of
a list and continually examines smaller sections of the list?<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>merge sort</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>quick sort</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span class='default'>binary
search</span></td></tr><tr valign='baseline'><td><div class='choice'>d.</div></td><td><span
class='default'>linear search</span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'>insertion sort</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:3' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;3.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Which searching algorithm is typically composed of a single loop with a nested
if statement?<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>merge sort</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>quick sort</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span class='default'>binary
search</span></td></tr><tr valign='baseline'><td><div class='choice'>d.</div></td><td><span
class='default'>linear search</span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'>insertion sort</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:4' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;4.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Which searching algorithm written iteratively and recursively?<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>merge sort</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>quick sort</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span class='default'>binary
search</span></td></tr><tr valign='baseline'><td><div class='choice'>d.</div></td><td><span
class='default'>linear search</span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'>insertion sort</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:5' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;5.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Assuming that the following algorithm is a linear search, which of the following
sections of code could fill&nbsp;&nbsp;&nbsp; /* code */&nbsp; so that the algorithm would work as
intended?<br><br><span class='font2'>public static int search( int&#091;&#093; list, int toFind
)<br>{<br>&nbsp; int spot = 0;<br><br>&nbsp; </span> /* code */ <span class='font2'><br><br>&nbsp;
return -1;<br>}<br><br></span>I.<span class='font2'><br>for( int item : list )<br>{<br>&nbsp; if(
item == toFind )<br>&nbsp;&nbsp;&nbsp; return spot;<br>&nbsp; spot++;<br>}<br><br></span>II.<span
class='font2'><br>for( int item : list )<br>{<br>&nbsp; if( item == toFind )<br>&nbsp;&nbsp;&nbsp;
return spot;<br>}<br><br></span>III.<span class='font2'><br>for( int item : list )<br>{<br>&nbsp; if(
spot == toFind )<br>&nbsp;&nbsp;&nbsp; return -1;<br>&nbsp; spot++;<br>}</span><br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>I only</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>I and II only</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span class='default'>II and III
only</span></td></tr><tr valign='baseline'><td><div class='choice'>d.</div></td><td><span
class='default'>I and III only</span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'>III only</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:6' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;6.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Assuming that the following algorithm is a linear search, which of the following
sections of code could fill&nbsp;&nbsp;&nbsp; /* code */&nbsp; so that the algorithm would work as
intended?<br><br><span class='font2'>public static int search( int&#091;&#093; list, int toFind
)<br>{<br><br>&nbsp; </span> /* code */ <span class='font2'><br><br>&nbsp; return
-1;<br>}<br><br></span>I.<span class='font2'><br>for( int i = 0; i &lt;= list.length; i++
)<br>{<br>&nbsp; if( list&#091;i&#093; == toFind )<br>&nbsp;&nbsp;&nbsp; return
i;<br>}<br><br></span>II.<span class='font2'><br>for( int i = 0; i &lt; list.length; i++
)<br>{<br>&nbsp; if( i == toFind )<br>&nbsp;&nbsp;&nbsp; return i;<br>}<br><br></span>III.<span
class='font2'><br>for( int i = 0; i &lt; list.length; i++ )<br>{<br>&nbsp; if( list&#091;i&#093; ==
toFind )<br>&nbsp;&nbsp;&nbsp; return i;<br>}</span><br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>I only</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>I and II only</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span class='default'>II and III
only</span></td></tr><tr valign='baseline'><td><div class='choice'>d.</div></td><td><span
class='default'>I and III only</span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'>III only</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:7' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;7.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Assuming that the following algorithm is a binary search, which of the following
sections of code could fill&nbsp;&nbsp;&nbsp; /* code */&nbsp; so that the algorithm would work as
intended?<br><br><span class='font2'>public static int search( int&#091;&#093; list, int toFind
)<br>{<br></span><span class='font3'>&nbsp; int left = 0;<br></span><span class='font3'>&nbsp; int
right = list.length - 1; </span><span class='font2'><br><br>&nbsp; </span> /* code */ <span
class='font2'><br><br>&nbsp; return -1;<br>}<br><br></span>I.<span class='font2'><br></span><span
class='font3'>while (left &lt;= right){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int mid = (left + right) /
2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( list&#091;mid&#093; == toFind
)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
mid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if ( list&#091;mid&#093; &lt; toFind
)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; left = mid +
1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; right = mid &#8211; 1;<br>}</span><span class='font2'><br></span><span
class='font2'><br></span>II.<span class='font2'><br></span><span class='font3'>while (left &lt;=
right){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int mid = (left + right) /
2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( list&#091;mid&#093; == toFind
)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
mid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if ( list&#091;mid&#093; &gt; toFind
)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; left = mid +
1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; right = mid &#8211; 1;<br></span><span class='font3'>}</span><span
class='font2'><br><br></span>III.<span class='font2'><br></span><span class='font3'>while (left &lt;=
right){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int mid = (left + right) /
2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( mid == toFind )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (
list&#091;mid&#093; &lt; toFind )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
left = mid + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; right = mid &#8211; 1;<br></span><span
class='font3'>}</span><br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>I only</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>I and II only</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span class='default'>II and III
only</span></td></tr><tr valign='baseline'><td><div class='choice'>d.</div></td><td><span
class='default'>I and III only</span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'>III only</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:8' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;8.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Assuming that the following algorithm is supposed to search for the largest
value in the list, which of the following sections of code could fill&nbsp;&nbsp;&nbsp; /* code
*/&nbsp; so that the algorithm would work as intended?<br><br><span class='font2'>public static int
findLargest( int&#091;&#093; list )<br>{<br>&nbsp; int big = Integer.MIN_VALUE;<br><br>&nbsp; </span>
/* code */ <span class='font2'><br><br>&nbsp; return big;<br>}<br><br></span>I.<span
class='font2'><br>for( int i = 0; i &lt;= list.length; i++ )<br>{<br>&nbsp; if( list&#091;i&#093;
&gt; big )<br>&nbsp;&nbsp;&nbsp; big = list&#091;i&#093;;<br>}<br><br></span>II.<span
class='font2'><br>for( int i = 1; i &lt;= list.length; i++ )<br>{<br>&nbsp; if( list&#091;i-1&#093;
&gt; big )<br>&nbsp;&nbsp;&nbsp; big = list&#091;i-1&#093;;<br>}<br><br></span>III.<span
class='font2'><br>for( int i = 0; i &lt; list.length; i++ )<br>{<br>&nbsp; if( list&#091;i&#093; &gt;
big )<br>&nbsp;&nbsp;&nbsp; big = list&#091;i&#093;;<br>}</span><br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>I only</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>I and II only</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span class='default'>II and III
only</span></td></tr><tr valign='baseline'><td><div class='choice'>d.</div></td><td><span
class='default'>I and III only</span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'>III only</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:9' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;9.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Assuming that the following algorithm is supposed to find the smallest value in
the list, which of the following sections of code could fill&nbsp;&nbsp;&nbsp; /* code */&nbsp; so
that the algorithm would work as intended?<br><br><span class='font2'>public static int findSmallest(
int&#091;&#093; list )<br>{<br>&nbsp; int small = Integer.MAX_VALUE;<br><br>&nbsp; </span> /* code */
<span class='font2'><br><br>&nbsp; return small;<br>}<br><br></span>I.<span class='font2'><br>for(
int item : list )<br>{<br>&nbsp; if( list&#091;item&#093; &lt; small )<br>&nbsp;&nbsp;&nbsp; small =
item;<br>}<br><br></span>II.<span class='font2'><br>for( int item : list )<br>{<br>&nbsp; if(
list&#091;item&#093; &lt; small )<br>&nbsp;&nbsp;&nbsp; small =
list&#091;item&#093;;<br>}<br><br></span>III.<span class='font2'><br>for( int item : list
)<br>{<br>&nbsp; if( item &lt; small )<br>&nbsp;&nbsp;&nbsp; small = item;<br>}</span><br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>I only</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>I and II only</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span class='default'>II and III
only</span></td></tr><tr valign='baseline'><td><div class='choice'>d.</div></td><td><span
class='default'>I and III only</span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'>III only</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:10' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;10.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>If a search value exists in a sorted list of 200 items, what is the
<b><i>maximum</i></b> number of comparisons that may be needed to find the search value using a
linear / sequential search?<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>200</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>199</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>201</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>1</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>400</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:11' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;11.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>If a search value exists in a sorted list of 200 items, what is the
<b><i>minimum</i></b> number of comparisons that may be needed to find the search value using a
linear / sequential search?<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>200</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>199</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>201</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>1</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>400</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:12' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;12.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>If a search value exists in an unsorted list of 200 items, what is the
<b><i>minimum</i></b> number of comparisons that may be needed to find the search value using a
linear / sequential search?<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>200</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>199</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>201</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>1</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>400</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:13' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;13.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>If a search value exists in an unsorted list of 200 items, what is the
<b><i>maximum</i></b> number of comparisons that may be needed to find the search value using a
linear / sequential search?<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>1</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>199</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>200</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>201</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>400</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:14' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;14.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>If a search value exists in a sorted list of 200 items, what is the
<b><i>maximum</i></b> number of comparisons that may be needed to find the search value using a
binary search?<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>1</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>8</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>7</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>10</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>9</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:15' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;15.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>If a search value exists in a sorted list of 200 items, what is the
<b><i>minimum</i></b> number of comparisons that may be needed to find the search value using a
binary search?<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>1</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>8</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>7</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>10</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>9</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:16' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;16.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>If a search value exists in a sorted list of 2000 items, what is the
<b><i>maximum</i></b> number of comparisons that may be needed to find the search value using a
binary search?<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>11</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>8</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>12</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>10</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>9</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:17' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;17.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>If a search value exists in a sorted list of 3000 items, what is the
<b><i>maximum</i></b> number of comparisons that may be needed to find the search value using a
binary search?<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>11</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>8</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>12</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>10</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>9</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:18' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;18.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>If a search value exists in a sorted list of 1000 items, what is the
<b><i>maximum</i></b> number of comparisons that may be needed to find the search value using a
binary search?<br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>11</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>8</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>12</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>10</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>9</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:19' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;19.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>How many times will method&nbsp;&nbsp; <span
class='font2'>go()</span>&nbsp;&nbsp; be called given the call&nbsp;&nbsp; <span class='font2'>check(
10 )</span>&nbsp; ?<br><br><span class='font2'>public static void check( int n )<br>{<br>&nbsp; for(
int i = 0; i &lt; n; i++ )<br>&nbsp;&nbsp;&nbsp; for( int j = 0; j &lt; n; j++
)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go( i * j );<br>}</span><br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>100</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>55</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>45</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>90</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>54</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:20' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;20.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>How many times will method&nbsp;&nbsp; <span
class='font2'>go()</span>&nbsp;&nbsp; be called given the call&nbsp;&nbsp; <span class='font2'>check(
10 )</span>&nbsp; ?<br><br><span class='font2'>public static void check( int n )<br>{<br>&nbsp; for(
int i = 0; i &lt; n; i++ )<br>&nbsp;&nbsp;&nbsp; for( int j = i; j &lt; n; j++
)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go( i * j );<br>}</span><br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>100</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>55</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>45</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>90</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>54</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:21' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;21.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>How many times will method&nbsp;&nbsp; <span
class='font2'>go()</span>&nbsp;&nbsp; be called given the call&nbsp;&nbsp; <span class='font2'>check(
10 )</span>&nbsp; ?<br><br><span class='font2'>public static void check( int n )<br>{<br>&nbsp; for(
int i = 0; i &lt; n; i++ )<br>&nbsp;&nbsp;&nbsp; for( int j = 0; j &lt; i; j++
)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go( i * j );<br>}</span><br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>100</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>55</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>45</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>90</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>54</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:22' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;22.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>How many times will method&nbsp;&nbsp; <span
class='font2'>go()</span>&nbsp;&nbsp; be called given the call&nbsp;&nbsp; <span class='font2'>check(
10 )</span>&nbsp; ?<br><br><span class='font2'>public static void check( int n )<br>{<br>&nbsp; for(
int i = 0; i &lt; n; i++ )<br>&nbsp;&nbsp;&nbsp; for( int j = 0; j &lt; n-1; j++
)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go( i * j );<br>}</span><br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>100</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>55</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>45</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>90</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>54</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:23' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;23.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>How many times will method&nbsp;&nbsp; <span
class='font2'>go()</span>&nbsp;&nbsp; be called given the call&nbsp;&nbsp; <span class='font2'>check(
10 )</span>&nbsp; ?<br><br><span class='font2'>public static void check( int n )<br>{<br>&nbsp; for(
int i = 0; i &lt; n; i++ )<br>&nbsp;&nbsp;&nbsp; for( int j = 0; j &lt; n-j; j++
)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go( i * j );<br>}</span><br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>40</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>55</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>45</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>50</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>145</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:24' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;24.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>How many times will method&nbsp;&nbsp; <span
class='font2'>go()</span>&nbsp;&nbsp; be called given the call&nbsp;&nbsp; <span class='font2'>check(
10 )</span>&nbsp; ?<br><br><span class='font2'>public static void check( int n )<br>{<br>&nbsp; for(
int i = 0; i &lt; n-1; i++ )<br>&nbsp;&nbsp;&nbsp; for( int j = i; j &lt; n; j++
)<br>&nbsp;&nbsp;&nbsp; &nbsp; go( i * j );<br>}</span><br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>40</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>55</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>45</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>50</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>54</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:25' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;25.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>How many times will method&nbsp;&nbsp; <span
class='font2'>go()</span>&nbsp;&nbsp; be called given the call&nbsp;&nbsp; <span class='font2'>check(
10 )</span>&nbsp; ?<br><br><span class='font2'>public static void check( int n )<br>{<br>&nbsp; for(
int i = 0; i &lt; n; i++ )<br>&nbsp;&nbsp;&nbsp; for( int j = 0; j &lt; n-i; j++
)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go( i * j );<br>}</span><br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>40</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>55</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>45</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>50</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>145</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:26' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;26.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>How many times will method&nbsp;&nbsp; <span
class='font2'>go()</span>&nbsp;&nbsp; be called given the call&nbsp;&nbsp; <span class='font2'>check(
10 )</span>&nbsp; ?<br><br><span class='font2'>public static void check( int n )<br>{<br>&nbsp; for(
int i = 0; i &lt; n-1; i++ )<br>&nbsp;&nbsp;&nbsp; for( int j = i; j &lt; n; j++
)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go( i * j );<br>}</span><br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>40</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>55</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>45</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>54</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>145</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:27' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;27.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>How many times will method&nbsp;&nbsp; <span
class='font2'>go()</span>&nbsp;&nbsp; be called given the call&nbsp;&nbsp; <span class='font2'>check(
10 )</span>&nbsp; ?<br><br><span class='font2'>public static void check( int n )<br>{<br>&nbsp; for(
int i = 0; i &lt; n; i++ )<br>&nbsp;&nbsp;&nbsp; for( int j = 0; j &lt; n+1; j++
)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; go( i * j );<br>}</span><br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>40</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>55</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'>45</span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'>50</span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'>110</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:28' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;28.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Assuming that the following algorithm is supposed to return the count of the
numbers in the list larger than the first item, which of the following sections of code could
fill&nbsp;&nbsp;&nbsp; /* code */&nbsp; so that the algorithm would work as intended?<br><br><span
class='font2'>public static int countEm( int&#091;&#093; list )<br>{<br>&nbsp; int cnt =
0;<br><br>&nbsp; </span> /* code */ <span class='font2'><br><br>&nbsp; return
cnt;<br>}<br><br></span>I.<span class='font2'><br>for( int i = 0; i &lt; list.length; i++
)<br>{<br>&nbsp; if( list&#091;0&#093; &gt; list&#091;i&#093; )<br>&nbsp;&nbsp;&nbsp; cnt = cnt +
1;<br>}<br><br></span>II.<span class='font2'><br>for( int i = 0; i &lt; list.length; i++
)<br>{<br>&nbsp; if( list&#091;i&#093; &gt; list&#091;0&#093; )<br>&nbsp;&nbsp;&nbsp; cnt = cnt +
1;<br>}<br><br></span>III.<span class='font2'><br>for( int i = 1; i &lt;= list.length; i++
)<br>{<br>&nbsp; if( list&#091;i-1&#093; &gt; list&#091;0&#093; )<br>&nbsp;&nbsp;&nbsp; cnt = cnt +
1;<br>}</span><br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>I only</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>I and II only</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span class='default'>II and III
only</span></td></tr><tr valign='baseline'><td><div class='choice'>d.</div></td><td><span
class='default'>I and III only</span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'>III only</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:29' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;29.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Assuming that the following code represents a selection sort designed to sort
the items in list in ascending order, which of the following sections of code shown below could
fill&nbsp;&nbsp;&nbsp; /* code */&nbsp; so that the algorithm would work as intended?<br><br><span
class='font2'>public static void sort( int&#091;&#093; list )<br>{<br>&nbsp; for( int i=0; i &lt;
list.length-1; i++)<br>&nbsp; {<br>&nbsp;&nbsp;&nbsp; int min = i;<br>&nbsp;&nbsp;&nbsp; for( int j =
i+1; j &lt; list.length; j++)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>/*
code */<span class='font2'><br>&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; if( min !=
i)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int temp =
list&#091;min&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; list&#091;min&#093; =
list&#091;i&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; list&#091;i&#093; = temp;<br>&nbsp;&nbsp;&nbsp;
}<br>&nbsp; }<br>}<br><br></span>I.<span class='font2'><br>if( list&#091;j&#093; &lt;
list&#091;min&#093; )<br>&nbsp; min = j;<br><br></span>II.<span class='font2'><br>if(
list&#091;j&#093; &gt; list&#091;min&#093; )<br>&nbsp; min = j;<br><br></span>III.<span
class='font2'><br>if( list&#091;i&#093; &lt; list&#091;min&#093; )<br>&nbsp; min =
i;</span><br></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'>I only</span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'>I and II only</span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span class='default'>II and III
only</span></td></tr><tr valign='baseline'><td><div class='choice'>d.</div></td><td><span
class='default'>I and III only</span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'>III only</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:30' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;30.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Assuming that the following code represents an insertion sort designed to sort
the items in list in ascending order, which of the following sections of code shown below could
fill&nbsp;&nbsp;&nbsp; /* code */&nbsp; so that the algorithm would work as intended?<b><span
style='font-size:12pt'><br><br></span></b><span class='font2'>public static void sort(
int&#091;&#093; x )<br>{<br>&nbsp;&nbsp; for(int i = 1; i &lt; x.length; i++)<br>&nbsp;&nbsp; {
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int val = x&#091;i&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int j
= i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while(&nbsp; </span>/* code */&nbsp; <span class='font2'>
)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
x&#091;j&#093; = x&#091;j-1&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
j--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x&#091;j&#093; =
val;<br>&nbsp;&nbsp; }<br>}<br></span></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'><span class='font2'>j &gt; 0 &amp;&amp; x&#091;j-1&#093; &gt;
val</span></span></td></tr><tr valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'><span class='font2'>j &gt; 0 &amp;&amp; x&#091;j-1&#093; &lt;
val</span></span></td></tr><tr valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'><span class='font2'>j &gt; 0 &amp;&amp; x&#091;j-1&#093; ==
val</span></span></td></tr><tr valign='baseline'><td><div class='choice'>d.</div></td><td><span
class='default'><span class='font2'>j &gt; 0 &amp;&amp; x&#091;j&#093; &lt;
val</span></span></td></tr><tr valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'><span class='font2'>j &gt; 0 &amp;&amp; x&#091;j&#093; &gt;
val</span></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:31' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;31.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Assuming that the following code represents an insertion sort designed to sort
the items in list in descending order, which of the following sections of code shown below could
fill&nbsp;&nbsp;&nbsp; <br>/* code */&nbsp; so that the algorithm would work as intended?<b><span
style='font-size:12pt'><br><br></span></b><span class='font2'>public static void sort(
int&#091;&#093; x )<br>{<br>&nbsp;&nbsp; for(int i = 1; i &lt; x.length; i++)<br>&nbsp;&nbsp; {
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int val = x&#091;i&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int j
= i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while(&nbsp; </span>/* code */&nbsp; <span class='font2'>
)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
x&#091;j&#093; = x&#091;j-1&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
j--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x&#091;j&#093; =
val;<br>&nbsp;&nbsp; }<br>}<br></span></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'><span class='font2'>j &gt; 0 &amp;&amp; x&#091;j-1&#093; &gt;
val</span></span></td></tr><tr valign='baseline'><td><div class='choice'>b.</div></td><td><span
class='default'><span class='font2'>j &gt; 0 &amp;&amp; x&#091;j-1&#093; &lt;
val</span></span></td></tr><tr valign='baseline'><td><div class='choice'>c.</div></td><td><span
class='default'><span class='font2'>j &gt; 0 &amp;&amp; x&#091;j-1&#093; ==
val</span></span></td></tr><tr valign='baseline'><td><div class='choice'>d.</div></td><td><span
class='default'><span class='font2'>j &gt; 0 &amp;&amp; x&#091;j&#093; &lt;
val</span></span></td></tr><tr valign='baseline'><td><div class='choice'>e.</div></td><td><span
class='default'><span class='font2'>j &gt; 0 &amp;&amp; x&#091;j&#093; &gt;
val</span></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:32' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;32.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Assuming that the following code represents a merge sort designed to sort the
items in list in ascending order, which of the following sections of code shown below could
fill&nbsp;&nbsp;&nbsp; <br>/* code */&nbsp; so that the algorithm would work as intended?<span
style='font-size:12pt'><b><br></b></span><span class='font2'><span
style='font-size:12pt'><br></span>public void sort( int&#091;&#093; list, int front, int
back)<br>{<br>&nbsp;&nbsp; int mid =&nbsp; </span>/* code */ <span class='font2'><br>&nbsp;&nbsp; if(
mid==front) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;&nbsp; <br>&nbsp;&nbsp; sort(list, front,
mid);<br>&nbsp;&nbsp; sort(list, mid, back);<br>&nbsp;&nbsp; help(list, front,
back);<br>}<br><br>private void help(int&#091;&#093; list, int front, int back)&nbsp;
<br>{<br>&nbsp;&nbsp; int&#091;&#093; temp = new int&#091;back-front&#093;;<br>&nbsp;&nbsp; int i =
front;<br>&nbsp;&nbsp; int j =&nbsp; </span>/* code */ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
class='font2'>int k = 0;<br>&nbsp;&nbsp; int mid = j;<br>&nbsp;&nbsp; while( i &lt; mid &amp;&amp; j
&lt; back)<br>&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp; if(list&#091;i&#093; &lt;
list&#091;j&#093;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; temp&#091;k++&#093; =
list&#091;i++&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
temp&#091;k++&#093; = list&#091;j++&#093;;<br>&nbsp;&nbsp; }<br><br>&nbsp;&nbsp; while(i &lt; mid)
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; temp&#091;k++&#093; = list&#091;i++&#093;;<br>&nbsp;&nbsp; while(j
&lt; back) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; temp&#091;k++&#093; =
list&#091;j++&#093;;<br>&nbsp;&nbsp; for(i = 0; i &lt; back-front;
++i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; list&#091;front+i&#093; = temp&#091;i&#093;;<br>}
</span><b><br></b></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'><span class='font2'>front + back /2;</span></span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span class='default'><span
class='font2'>front+ (back / 2);</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>c.</div></td><td><span class='default'><span class='font2'>front /
2;</span></span></td></tr><tr valign='baseline'><td><div class='choice'>d.</div></td><td><span
class='default'><span class='font2'>( front + back ) / 2;</span></span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span class='default'><span
class='font2'>back / 2;</span></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:33' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;33.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Assuming that the following code represents a binary search designed to locate
the position of val in list, which of the following sections of code shown below could
fill&nbsp;&nbsp;&nbsp; <br>/* code */&nbsp; so that the algorithm would work as intended?<b><span
style='font-size:12pt'><br><br></span></b><span class='font2'>public static int search(
int&#091;&#093; list, int val )<br>{<br>&nbsp;&nbsp; int len = list.length; <br>&nbsp;&nbsp; int bot
= 0;<br>&nbsp;&nbsp; int top = len - 1;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp; int middle =
0;<br>&nbsp;&nbsp; while( bot &lt;= top )&nbsp; <br>&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
middle = </span>/* code */ <span class='font2'><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(
list&#091;middle&#093; == val )&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
middle;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if( list&#091;middle&#093; &gt; val
)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; top = middle -
1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bot = middle +
1;<br>&nbsp;&nbsp; }<br>&nbsp;&nbsp; return -1;<br>}<span
style='font-size:12pt'><br></span></span></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'><span class='font2'>bot + top / 2;</span></span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span class='default'><span
class='font2'>( bot + top ) / 2;</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>c.</div></td><td><span class='default'><span class='font2'>( bot + ( top / 2
);</span></span></td></tr><tr valign='baseline'><td><div class='choice'>d.</div></td><td><span
class='default'><span class='font2'>bot&nbsp; / 2;</span></span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span class='default'><span
class='font2'>top&nbsp; / 2;</span></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:34' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;34.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Assuming that the following code represents a quick sort designed to sort the
items in list in ascending order, which of the following sections of code shown below could
fill&nbsp;&nbsp;&nbsp; <br>/* code */&nbsp; so that the algorithm would work as intended?<span
style='font-size:12pt'><b><br></b></span><span class='font2'><span
style='font-size:12pt'><br></span>public static void sort(int&#091;&#093; x, int low, int
high)<br>{<br>&nbsp; if (low &lt; high)<br>&nbsp; {<br>&nbsp;&nbsp;&nbsp; int spot = go( x, low,
high);<br>&nbsp;&nbsp;&nbsp; sort( x, low, spot);<br>&nbsp;&nbsp;&nbsp; sort( x, spot+1,
high);<br>&nbsp; }<br>}</span><span class='font4'><span
style='font-size:28pt'><br></span></span><span class='font2'><br>int partition( int&#091;&#093; x,
int low, int high) <br>{<br>&nbsp; int pivot = x&#091;low&#093;; <br>&nbsp; int bot = low-1;
<br>&nbsp; int top = high+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;
while( bot &lt; top) <br>&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; while(
x&#091;--top&#093; &gt; pivot); <br>&nbsp;&nbsp;&nbsp; while( x&#091;++bot&#093; &lt;
pivot);<br>&nbsp;&nbsp;&nbsp; </span>/* code */ <span
class='font2'><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return top;<br>&nbsp;&nbsp;&nbsp; int temp =
x&#091;bot&#093;;<br>&nbsp;&nbsp;&nbsp; x&#091;bot&#093; = x&#091;top&#093;;<br>&nbsp;&nbsp;&nbsp;
x&#091;top&#093; = temp;<br>&nbsp; }<br>}</span><span class='font4'><span
style='font-size:24pt'><br></span></span></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'><span class='font2'>if( ! (bot &lt; top) )</span></span></td></tr><tr
valign='baseline'><td><div class='choice'>b.</div></td><td><span class='default'><span
class='font2'>if( bot &gt;= top )</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>c.</div></td><td><span class='default'><span class='font2'>if( bot == top
)</span></span></td></tr><tr valign='baseline'><td><div class='choice'>d.</div></td><td><span
class='default'>A and B only</span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'>A and C only</span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:35' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;35.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>What is output by the following code segment?<b><span
style='font-size:12pt'><br><br></span></b><span class='font2'>int&#091;&#093; x =
{2,3,-4,5,1,-2,3,9,0,11,12,12,3,54,32};<br>Arrays.sort( x );<br>System.out.println( x&#091;0&#093;
);<br></span></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'><span class='font2'>0</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'><span
class='font2'>-2</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>c.</div></td><td><span class='default'><span
class='font2'>54</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'><span
class='font2'>32</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'><span
class='font2'>-4</span></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:36' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;36.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>What is output by the following code segment?<b><span
style='font-size:12pt'><br><br></span></b><span class='font2'>int&#091;&#093; x =
{2,3,-4,5,1,-2,3,9,0,11,12,12,3,54,32};<br>Arrays.sort( x );<br>System.out.println( x&#091;
x.length-1 &#093; );<br></span></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'><span class='font2'>0</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'><span
class='font2'>-2</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>c.</div></td><td><span class='default'><span
class='font2'>54</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'><span
class='font2'>32</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'><span
class='font2'>-4</span></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:37' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;37.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>What is output by the following code segment?<b><span
style='font-size:12pt'><br><br></span></b><span class='font2'>int&#091;&#093; x =
{2,3,-4,5,1,-2,3,9,0,11,12,12,3,54,32};<br>Arrays.sort( x );<br>System.out.println(
Arrays.binarySearch( x, 11 ) );<br></span></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'><span class='font2'>11</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'><span
class='font2'>9</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>c.</div></td><td><span class='default'><span
class='font2'>7</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'><span
class='font2'>10</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'><span
class='font2'>8</span></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:38' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;38.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>What is output by the following code segment?<b><span
style='font-size:12pt'><br><br></span></b><span class='font2'>int&#091;&#093; x =
{2,3,-4,5,1,-2,3,9,0,11,12,12,3,54,32};<br>Arrays.sort( x );<br>System.out.println(
Arrays.binarySearch( x, 3 ) );<br></span></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'><span class='font2'>11</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'><span
class='font2'>9</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>c.</div></td><td><span class='default'><span
class='font2'>7</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'><span
class='font2'>10</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'><span
class='font2'>8</span></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:39' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;39.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>What is output by the following code segment?<b><span
style='font-size:12pt'><br><br></span></b><span class='font2'>Integer&#091;&#093; x =
{2,3,-4,5,1,-2,3,9,0,11,12,12,3,54,32};<br>ArrayList&lt;Integer&gt; list;<br>list = new
ArrayList&lt;Integer&gt;(Arrays.asList(x));<br>System.out.println( list.indexOf(0)
);<br></span></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'><span class='font2'>11</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'><span
class='font2'>9</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>c.</div></td><td><span class='default'><span
class='font2'>7</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'><span
class='font2'>10</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'><span
class='font2'>8</span></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:40' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;40.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>What is output by the following code segment?<b><span
style='font-size:12pt'><br><br></span></b><span class='font2'>Integer&#091;&#093; x =
{2,3,-4,5,1,-2,3,9,0,11,12,12,3,54,32};<br>ArrayList&lt;Integer&gt; list;<br>list = new
ArrayList&lt;Integer&gt;(Arrays.asList(x));<br>Collections.sort( list );<br>System.out.println(
list.indexOf(0) );<br></span></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'><span class='font2'>2</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'><span
class='font2'>4</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>c.</div></td><td><span class='default'><span
class='font2'>5</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'><span
class='font2'>3</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'><span
class='font2'>6</span></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:41' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;41.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>What is output by the following code segment?<b><span
style='font-size:12pt'><br><br></span></b><span class='font2'>int&#091;&#093; x =
{2,3,-4,5,1,-2,3,9,0,11,12,12,3,54,32};<br>Arrays.sort( x );<br>System.out.println(
Arrays.binarySearch( x, 4 ) );<br></span></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'><span class='font2'>-1</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'><span
class='font2'>-8</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>c.</div></td><td><span class='default'><span
class='font2'>-9</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'><span
class='font2'>-4</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'><span class='font2'>there is no output due to a
runtime exception</span></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:42' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;42.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>What is output by the following code segment?<b><span
style='font-size:12pt'><br><br></span></b><span class='font2'>int&#091;&#093; x =
{2,3,-4,5,1,-2,3,9,0,11,12,12,3,54,32};<br>Arrays.sort( x );<br>System.out.println(
Arrays.binarySearch( x, -50 ) );<br></span></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'><span class='font2'>-1</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'><span
class='font2'>-8</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>c.</div></td><td><span class='default'><span
class='font2'>-9</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'><span
class='font2'>-4</span></span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'><span class='font2'>there is no output due to a
runtime exception</span></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:43' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;43.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>What is output by the following code segment?<b><span
style='font-size:12pt'><br></span><br></b><span class='font2'>public static void
main(String&#091;&#093; args)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int&#091;&#093; ints =
{10,9,8,7,5,6,3,4,0};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sort(ints,0,0,0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
System.out.println(Arrays.toString(ints));<br>}</span><b><span class='font2'><br></span><br></b><span
class='font2'>public static void sort( int&#091;&#093; ints,int a, int b, int c
)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(a==ints.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(b==ints.length)<br>&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int save = ints&#091;c&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ints&#091;c&#093; =
ints&#091;a&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ints&#091;a&#093;
= save;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sort(ints,a+1,a+1,a+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
if(ints&#091;b&#093;&lt;ints&#091;c&#093;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort(ints,a,b+1,b);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sort(ints,a,b+1,c);<br>}<br></span></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'><span style='font-size:10pt'><span class='font5'>&#091;10, 9, 8, 7, 6, 5, 4, 3,
0&#093;</span></span></span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'><span style='font-size:10pt'><span
class='font5'>&#091;0, 3, 4, 5, 6, 7, 8, 9, 10&#093;</span></span></span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span class='default'><span
class='font2'><span style='font-size:10pt'>&#091;10, 9, 8, 7, 5, 6, 3, 4,
0&#093;</span></span></span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'><span class='font2'><span
style='font-size:10pt'>&#091;0, 4, 3, 6, 5, 7, 8, 9, 10&#093;</span></span></span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span class='default'><span
class='font2'>there is no output due to a runtime exception</span></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:44' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;44.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>What is output by the following code segment?<b><span
style='font-size:12pt'><br></span><br></b><span class='font2'>public static void
main(String&#091;&#093; args)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int&#091;&#093; ints =
{10,9,8,7,5,6,3,4,0};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sort(ints,0,0,0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
System.out.println(Arrays.toString(ints));<br>}</span><b><span class='font2'><br></span><br></b><span
class='font2'>public static void sort( int&#091;&#093; ints,int a, int b, int c
)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(a==ints.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(b==ints.length)<br>&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int save = ints&#091;c&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ints&#091;c&#093; =
ints&#091;a&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ints&#091;a&#093;
= save;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sort(ints,a+1,a+1,a+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
if(ints&#091;b&#093;&gt;ints&#091;c&#093;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort(ints,a,b+1,b);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sort(ints,a,b+1,c);<br>}<br></span></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'><span style='font-size:10pt'><span class='font5'>&#091;10, 9, 8, 7, 6, 5, 4, 3,
0&#093;</span></span></span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'><span style='font-size:10pt'><span
class='font5'>&#091;0, 3, 4, 5, 6, 7, 8, 9, 10&#093;</span></span></span></td></tr><tr
valign='baseline'><td><div class='choice'>c.</div></td><td><span class='default'><span
class='font2'><span style='font-size:10pt'>&#091;10, 9, 8, 7, 5, 6, 3, 4,
0&#093;</span></span></span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'><span class='font2'><span
style='font-size:10pt'>&#091;0, 4, 3, 6, 5, 7, 8, 9, 10&#093;</span></span></span></td></tr><tr
valign='baseline'><td><div class='choice'>e.</div></td><td><span class='default'><span
class='font2'>there is no output due to a runtime exception</span></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
<tr valign='baseline'>
	<td>
		<select name='MC:45' align='top' onmousewheel='return(false);'>
			<option value=' '> 
			<option value='A'>A
			<option value='B'>B
			<option value='C'>C
			<option value='D'>D
			<option value='E'>E
		</select>
	</td>
	<td>
		<p class='qnumber'>&nbsp;45.&nbsp;</p>
	</td>
	<td width='100%'>
<div class='default'>Which sorting algorithm does the following code implement?<b><span
style='font-size:12pt'><br></span><br></b><span class='font2'>public static void
main(String&#091;&#093; args)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int&#091;&#093; ints =
{10,9,8,7,5,6,3,4,0};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sort(ints,0,0,0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
System.out.println(Arrays.toString(ints));<br>}</span><b><span class='font2'><br></span><br></b><span
class='font2'>public static void sort( int&#091;&#093; ints,int a, int b, int c
)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(a==ints.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(b==ints.length)<br>&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int save = ints&#091;c&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ints&#091;c&#093; =
ints&#091;a&#093;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ints&#091;a&#093;
= save;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sort(ints,a+1,a+1,a+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
if(ints&#091;b&#093;&gt;ints&#091;c&#093;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort(ints,a,b+1,b);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sort(ints,a,b+1,c);<br>}<br></span></div>
<div class='default'><table cellpadding='0' cellspacing='0' width='95%' border='0'><tr
valign='baseline'><td width='4%'><div class='choice'>a.</div></td><td width='96%'><span
class='default'><span class='font2'><span
style='font-size:10pt'>quicksort</span></span></span></td></tr><tr valign='baseline'><td><div
class='choice'>b.</div></td><td><span class='default'><span style='font-size:10pt'><span
class='font5'>merge sort</span></span></span></td></tr><tr valign='baseline'><td><div
class='choice'>c.</div></td><td><span class='default'><span class='font2'><span
style='font-size:10pt'>selection sort</span></span></span></td></tr><tr valign='baseline'><td><div
class='choice'>d.</div></td><td><span class='default'><span class='font2'><span
style='font-size:10pt'>radix sort</span></span></span></td></tr><tr valign='baseline'><td><div
class='choice'>e.</div></td><td><span class='default'><span class='font2'>none of the
above</span></span></td></tr></table></div>
<div class='spacer'>&nbsp;</div>
	</td>
</tr>
</table>
<br clear='all'>
<br>
<br>
<table align='left' width='100%' cellpadding='0' cellspacing='0' border='0'>
<tr>
    <td bgcolor='#000000'>
	<div style='font-size:1pt'>&nbsp;</div>
    </td>
</tr>
<tr>
    <td><a href='javascript:alert("Use the mouse to submit.")'
	   onMouseOver='window.status = "Check Your Work"; return true'
	   onMouseOut='window.status = ""; return true'
	   onFocus='window.status = "Check Your Work"; return true'
	   onBlur='window.status = ""; return true'
	   onClick="return(GradeIt(document.forms[0]))">
	     <img src='review_11_sorts_and_files/chkwork.gif' border='0' alt='Check Your Work'></a>
	&nbsp;&nbsp;&nbsp;
	<a href='#' onclick='Restart(); return false'>
	     <img src='review_11_sorts_and_files/restart.gif' border='0' alt='Start Over'></a>
    </td>
</tr>
</table>
</form>
</body>
</html>